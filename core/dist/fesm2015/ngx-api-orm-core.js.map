{"version":3,"file":"ngx-api-orm-core.js","sources":["../package/src/utils.ts","../package/src/relations/to-many.ts","../package/src/relations/relation-configuration.ts","../package/src/relations/to-one.ts","../package/src/request-handlers/abstract-builders.ts","../package/src/request-handlers/default-builders.ts","../package/src/request-handlers/abstract-adapters.ts","../package/src/request-handlers/default-adapters.ts","../package/src/resource.core.ts","../package/src/resource.decorators.ts","../package/src/resource.module.ts"],"sourcesContent":["import { Injector, Provider } from '@angular/core';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Resource } from './resource.core';\nimport { RelationConfiguration, RelationType } from './relations/relation-configuration';\nimport { ToManyBuilder, ToOneBuilder, SimpleBuilder } from './request-handlers/default-builders';\nimport { ToManyAdapter, ToOneAdapter, SimpleAdapter } from './request-handlers/default-adapters';\n\nexport function toDash(name: string): string {\n\tconst split = name.split('');\n\tsplit[0] = split[0].toLowerCase();\n\tconst splitJoin = split.join('');\n\treturn splitJoin.replace(/([A-Z])/g, $1 => {\n\t\treturn '-' + $1.toLowerCase();\n\t});\n}\n\nexport function toPluralDash(name: string) {\n\treturn toPlural(toDash(name));\n}\n\nexport function toPlural(name: string) {\n\treturn name + 's';\n}\n\n/** @internal */\nexport let InjectorContainer: { [instance: string]: Injector | undefined } = { instance: undefined };\n\n/** @internal */\nexport function getDependencyInjectionEntries(token: any): RequestHandlers {\n\tif (InjectorContainer.instance !== undefined) {\n\t\tconst injector = InjectorContainer.instance;\n\t\tconst injectedInstance = injector.get(token);\n\t\treturn [\n\t\t\tinjectedInstance['_adapter'],\n\t\t\tinjectedInstance['_builder'],\n\t\t\tinjectedInstance['_toOneAdapter'],\n\t\t\tinjectedInstance['_toOneBuilder'],\n\t\t\tinjectedInstance['_toManyAdapter'],\n\t\t\tinjectedInstance['_toManyBuilder']\n\t\t];\n\t}\n\treturn [] as any;\n}\n\nexport enum HttpVerb {\n\tGET = 'get',\n\tPOST = 'post',\n\tPUT = 'put',\n\tPATCH = 'patch',\n\tDELETE = 'delete',\n\n}\n\n/** @internal */\nexport function initMetaData(ctor: any) {\n\tif (!Reflect.hasOwnMetadata(METAKEYS.FIELDS, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.FIELDS, [], ctor);\n\t}\n\tif (!Reflect.hasOwnMetadata(METAKEYS.ATTRIBUTES, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.ATTRIBUTES, [], ctor);\n\t}\n\tif (!Reflect.hasOwnMetadata(METAKEYS.RELATIONS, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.RELATIONS, {}, ctor);\n\t}\n\tif (!Reflect.hasOwnMetadata(METAKEYS.INSTANCES, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.INSTANCES, [], ctor);\n\t}\n}\n\n/** @internal */\nexport function updateInterceptProxyFactory(targetInstance: Resource) {\n\tconst attributes = Reflect.getMetadata(METAKEYS.ATTRIBUTES, targetInstance.constructor);\n\treturn new Proxy(targetInstance, {\n\t\tset(instance: any, key: string, value: any, proxy: any): boolean {\n\t\t\tif (attributes.indexOf(key) > -1) {\n\t\t\t\tconst updatedFields = Reflect.getMetadata(METAKEYS.UPDATED, proxy);\n\t\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, instance, key);\n\t\t\t\tupdatedFields[map || key] = instance[key];\n\t\t\t}\n\t\t\tinstance[key] = value;\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n/** @internal */\nexport function readOnlyArrayProxyFactory(targetArray: Array<any>) {\n\tconst forbiddenMethods = ['push', 'pop', 'shift', 'unshift'];\n\treturn new Proxy(targetArray, {\n\t\tget(instance: any, key: string, proxy: any): boolean {\n\t\t\tif (forbiddenMethods.indexOf(key) > -1) {\n\t\t\t\tthrow Error(`Operation ${key} not allowed on this readonly array!`);\n\t\t\t}\n\t\t\treturn instance[key];\n\t\t}\n\t});\n}\n\nexport const METAKEYS = {\n\tFIELDS: 'orm:fields',\n\tATTRIBUTES: 'orm:attributes',\n\tRELATIONS: 'orm:relations',\n\tMAP: 'orm:map',\n\tUPDATED: 'orm:updated',\n\tINSTANCES: 'orm:instances',\n\tNAME: 'orm:name'\n};\n\n/** @internal */\nexport class ResourceModuleConfiguration {\n\trootPath?: string;\n}\n\nexport class ResourceModuleConfigurationWithProviders extends ResourceModuleConfiguration {\n\t/** Sets the API root of your app. */\n\trootPath?: string;\n\t/** Allows to conveniently register a collection of request handlers. See the guide on extendability on how to use this. Can be set to {@link JsonApiDotOrg}. */\n\trequestHandler?: Provider[];\n}\n\nexport interface Instantiable<T> {\n\tnew (...args: any[]): T;\n}\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\nexport type RawInstanceTemplate<T extends Resource> = Omit<T, keyof Resource>;\n\nexport interface ResourceType<T> extends Instantiable<T> {\n\t_instances: T[];\n\tcollection<U extends Resource>(this: ResourceType<U>): U[];\n\tfetch<U extends Resource>(this: ResourceType<U>): Promise<U[]>;\n\tfind<U extends Resource>(this: ResourceType<U>, id: number): U | undefined;\n\ttemplate<U extends Resource>(this: ResourceType<U>): RawInstanceTemplate<U>;\n\tfactory<U extends Resource>(this: ResourceType<U>, rawInstance: Array<{}>): Array<U>;\n\tfactory<U extends Resource>(this: ResourceType<U>, rawInstance: {}): U;\n}\n\nexport interface HttpClientOptions {\n\turl?: string;\n\tbody?: any;\n\theaders?: HttpHeaders | { [header: string]: string | string[] };\n\tobserve?: 'body';\n\tparams?: HttpParams | { [param: string]: string | string[] };\n\tresponseType?: 'json';\n\treportProgress?: boolean;\n\twithCredentials?: boolean;\n}\n/** @internal */\nexport type RequestHandlers = [SimpleAdapter, SimpleBuilder, ToOneAdapter, ToOneBuilder, ToManyAdapter, ToManyBuilder];\n\n/** @internal */\nexport type UnresolvedRequestHandlers = [\n\tSimpleAdapter | undefined,\n\tSimpleBuilder | undefined,\n\tToOneAdapter | undefined,\n\tToOneBuilder | undefined,\n\tToManyAdapter | undefined,\n\tToManyBuilder | undefined\n];\n","import { RelationConfiguration } from './relation-configuration';\nimport { Resource } from '../resource.core';\nimport { METAKEYS, HttpClientOptions } from '../utils';\nimport { ToManyBuilder } from '../request-handlers/default-builders';\nimport { ToManyAdapter } from '../request-handlers/default-adapters';\n\n// @dynamic\nexport class ToManyRelation<THost extends Resource, TRelated extends Resource> extends Array<TRelated> {\n\tconstructor(\n\t\tprivate readonly _hostInstance: THost,\n\t\tprivate readonly _configuration: RelationConfiguration<THost, TRelated>,\n\t\tprivate readonly _adapter: ToManyAdapter,\n\t\tprivate readonly _builder: ToManyBuilder\n\t) {\n\t\tsuper();\n\t\tconst rawObjects: Array<{}> = _hostInstance[_configuration.keyOnInstance] || null;\n\t\tif (rawObjects == null) {\n\t\t\treturn;\n\t\t}\n\t\tconst instances = Array.prototype.concat.apply([], [<TRelated[]>_configuration.RelatedResource.factory(rawObjects)]);\n\t\tthis.push(...instances);\n\t}\n\t// TODO: IMPLEMENT FETCH (LAZY GETTING OF RELATIONS)\n\t// TODO: IMPLEMENT SET (LAZY SYNC OF CHANGES: COMPLETE REPLACE)\n\n\t/*tslint:disable semicolon*/\n\t/**\n\t * Runs the add pipeline of your model for a related resource using the To-Many request adapter and builder.\n\t * @param  TRelated relatedInstance\n\t * @param  any={} options\n\t */\n\tpublic add = async (relatedInstance: TRelated, options: HttpClientOptions = {}): Promise<void> => {\n\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\n\t\tif (!(relatedInstance instanceof this._configuration.RelatedResource)) {\n\t\t\tthrow new TypeError('parameter relatedInstance must be of type ' + relatedName);\n\t\t}\n\n\t\tconst body = this._adapter.add(relatedInstance, this._hostInstance);\n\t\tawait this._builder.add(relatedName, hostName, body, this._hostInstance, options);\n\t\tthis.push(relatedInstance);\n\t};\n\n\t/**\n\t * Runs the delete pipeline of your model for a related resource using the To-Many request adapter and builder.\n\t * @param  TRelated relatedInstance\n\t * @param  any={} options\n\t */\n\tpublic remove = async (relatedInstance: TRelated, options: HttpClientOptions = {}) => {\n\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\n\t\tif (this.findIndex(ri => ri.id === relatedInstance.id) === -1) {\n\t\t\tthrow new RangeError('parameter relatedInstance not included in this RelatedResourceCollection');\n\t\t}\n\t\tconst body = this._adapter.remove(relatedInstance, this._hostInstance);\n\t\tawait this._builder.remove(relatedName, hostName, body, this._hostInstance, options);\n\t\tthis._removeInstance(relatedInstance);\n\t};\n\n\t/** @internal */\n\tprivate _removeInstance = (relatedInstance: TRelated) => {\n\t\tfor (let n = 0; n < this.length; n++) {\n\t\t\tif (this[n].id === relatedInstance.id) {\n\t\t\t\tthis.splice(n, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\t/*tslint:enable semicolon*/\n}\n","import { Resource } from '../resource.core';\nimport { ResourceType } from '../utils';\n\n/** @internal */\nexport enum RelationType {\n\tToOne = 'toOne',\n\tToMany = 'toMany',\n\tNone = 'none'\n}\n\n// @dynamic\n/** @internal */\nexport class RelationConfiguration<THost extends Resource, TRelated extends Resource> {\n\tconstructor(\n\t\tpublic readonly HostResource: ResourceType<THost>,\n\t\tpublic readonly RelatedResource: ResourceType<TRelated>,\n\t\tpublic readonly keyOnInstance: any,\n\t\tpublic readonly type: RelationType\n\t) {}\n}\n","import { RelationConfiguration } from './relation-configuration';\nimport { Resource } from '../resource.core';\nimport { METAKEYS, HttpClientOptions } from '../utils';\nimport { ToOneBuilder } from '../request-handlers/default-builders';\nimport { ToOneAdapter } from '../request-handlers/default-adapters';\n\nexport class ToOneRelation<THost extends Resource, TRelated extends Resource> {\n\t/** The references to the related instance */\n\tpublic instance: TRelated | null;\n\tconstructor(\n\t\tprivate readonly _hostInstance: THost,\n\t\tprivate readonly _configuration: RelationConfiguration<THost, TRelated>,\n\t\tprivate readonly _adapter: ToOneAdapter,\n\t\tprivate readonly _builder: ToOneBuilder\n\t) {\n\t\tconst rawObject: {} = _hostInstance[_configuration.keyOnInstance] || null;\n\n\t\tthis.instance = rawObject === null ? null : _configuration.RelatedResource.factory(rawObject);\n\t}\n\n\t// TODO: IMPLEMENT FETCH (LAZY GETTING OF RELATIONS)\n\n\t/**\n\t * Synchronize the model without using explicitly using `set` or `add`. This way it is possible to update a relation using e.g. DOM interactions without making premature requests.\n\t * @returns Promise<void>\n\t */\n\tpublic async sync(): Promise<void> {\n\t\tif (this.instance === null) {\n\t\t\tawait this.remove();\n\t\t} else {\n\t\t\tawait this.set(this.instance);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the delete pipeline of your model for a related resource using the To-One request adapter and builder.\n\t * @param  TRelated targetInstance\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise\n\t */\n\tpublic async remove(options: HttpClientOptions = {}): Promise<void> {\n\t\tif (this.instance) {\n\t\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\t\t\tconst body = this._adapter.remove(this.instance, this._hostInstance);\n\t\t\tawait this._builder.remove(relatedName, hostName, body, this._hostInstance, options);\n\t\t\tthis.instance = null;\n\t\t}\n\t}\n\t/**\n\t * Runs the add pipeline of your model for a related resource using the To-One request adapter and builder.\n\t * @param  TRelated targetInstance\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise\n\t */\n\tpublic async set(targetInstance: TRelated, options: HttpClientOptions = {}): Promise<void> {\n\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\t\tconst body = this._adapter.add(targetInstance, this._hostInstance);\n\t\tawait this._builder.add(relatedName, hostName, body, this._hostInstance, options);\n\t\tthis.instance = targetInstance;\n\t}\n}\n","import { toPlural, ResourceModuleConfiguration, HttpClientOptions, HttpVerb } from '../utils';\nimport { HttpClient } from '@angular/common/http';\n\nexport namespace Abstract {\n\texport abstract class BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient) {}\n\n\t\tpublic request(method: HttpVerb, path: string, options: HttpClientOptions, body?: any): Promise<Object> {\n\t\t\tdelete options.url;\n\t\t\tif (body) {\n\t\t\t\toptions.body = body;\n\t\t\t}\n\t\t\treturn this._http.request(method, path, options).toPromise();\n\t\t}\n\t}\n\n\texport abstract class SimpleBuilder extends BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient, protected readonly config: ResourceModuleConfiguration) {\n\t\t\tsuper(_http);\n\t\t}\n\t\tprotected buildUrl(targetName: string, targetInstance?: any): string {\n\t\t\tlet path = (this.config.rootPath ? this.config.rootPath : '') + `/${toPlural(targetName)}/$targetId`;\n\t\t\tpath = path.replace('/$targetId', targetInstance ? `/${targetInstance.id}` : '');\n\t\t\treturn path;\n\t\t}\n\n\t\tpublic fetch(targetName: string, options: HttpClientOptions): Promise<Object> {\n\t\t\tconst path = options.url || this.buildUrl(targetName);\n\t\t\treturn <Promise<Object[]>>this.request(HttpVerb.GET, path, options);\n\t\t}\n\t\tpublic save(targetName: string, body: any, options: HttpClientOptions): Promise<Object> {\n\t\t\tconst path = options.url || this.buildUrl(targetName);\n\t\t\treturn this.request(HttpVerb.POST, path, options, body);\n\t\t}\n\t\tpublic update(targetName: string, body: any, options: HttpClientOptions): Promise<any> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, body);\n\t\t\treturn this.request(HttpVerb.PATCH, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t\tpublic delete(targetName: string, instance: any, options: HttpClientOptions): Promise<any> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, instance);\n\t\t\treturn this.request(HttpVerb.DELETE, path, options).then(() => Promise.resolve());\n\t\t}\n\t}\n\texport abstract class ToOneBuilder extends BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient, protected readonly config: ResourceModuleConfiguration) {\n\t\t\tsuper(_http);\n\t\t}\n\t\tprotected buildUrl(targetName: string, relatedName: string, relatedInstance: any): string {\n\t\t\tconst path = (this.config.rootPath ? this.config.rootPath : '') + `/${toPlural(relatedName)}/${relatedInstance.id}/${targetName}`;\n\t\t\treturn path;\n\t\t}\n\t\tpublic add(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.PATCH, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t\tpublic remove(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.DELETE, path, options).then(() => Promise.resolve());\n\t\t}\n\t}\n\texport abstract class ToManyBuilder extends BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient, protected readonly config: ResourceModuleConfiguration) {\n\t\t\tsuper(_http);\n\t\t}\n\t\tprotected buildUrl(targetName: string, relatedName: string, relatedInstance: any): string {\n\t\t\tconst path =\n\t\t\t\t(this.config.rootPath ? this.config.rootPath : '') + `/${toPlural(relatedName)}/${relatedInstance.id}/${toPlural(targetName)}`;\n\t\t\treturn path;\n\t\t}\n\t\tpublic add(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.POST, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t\tpublic remove(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.DELETE, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { ResourceModuleConfiguration } from '../utils';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Abstract } from './abstract-builders';\n\n/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class SimpleBuilder extends Abstract.SimpleBuilder {\n\tconstructor(_http: HttpClient, _config: ResourceModuleConfiguration) {\n\t\tsuper(_http, _config);\n\t}\n}\n/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToOneBuilder extends Abstract.ToOneBuilder {\n\tconstructor(_http: HttpClient, _config: ResourceModuleConfiguration) {\n\t\tsuper(_http, _config);\n\t}\n}\n/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToManyBuilder extends Abstract.ToManyBuilder {\n\tconstructor(_http: HttpClient, _config: ResourceModuleConfiguration) {\n\t\tsuper(_http, _config);\n\t}\n}\n\n","import { METAKEYS } from '../utils';\nimport { ToOneRelation } from '../relations/to-one';\nimport { ToManyRelation } from '../relations/to-many';\n\n/**\n * request adapters convert incoming bodies and outgoing bodies.\n * They do not touch options (headers and stuff).\n */\nexport namespace Abstract {\n\texport abstract class SimpleAdapter {\n\t\tpublic save(instance: any) {\n\t\t\treturn this.convertOutgoing(instance);\n\t\t}\n\t\tpublic update(instance: any, affectedFields: { [field: string]: string | undefined | null }) {\n\t\t\treturn this.convertOutgoing(instance);\n\t\t}\n\t\tpublic parseIncoming(rawInstances: Object): Object[] {\n\t\t\treturn <Object[]>rawInstances;\n\t\t}\n\t\tprotected convertOutgoing(instance: any): any {\n\t\t\tconst rv = {};\n\t\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, instance.constructor);\n\t\t\tfields.forEach((f: string) => {\n\t\t\t\tif (instance[f] instanceof ToOneRelation) {\n\t\t\t\t\trv[f] = instance[f].instance === null ? null : this.convertOutgoing(instance[f].instance);\n\t\t\t\t} else if (instance[f] instanceof Array) {\n\t\t\t\t\trv[f] = [];\n\t\t\t\t\tinstance[f].forEach( (i: any) => rv[f].push(this.convertOutgoing(i)));\n\t\t\t\t} else {\n\t\t\t\t\trv[f] = instance[f];\n\t\t\t\t}\n\t\t\t});\n\t\t\tReflect.ownKeys(instance).forEach(property => {\n\t\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, instance.constructor, <string>property);\n\t\t\t\tif (map) {\n\t\t\t\t\trv[map] = rv[property];\n\t\t\t\t\tdelete rv[property];\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn rv;\n\t\t}\n\t}\n\texport abstract class ToOneAdapter {\n\t\tpublic add(targetInstance: any, relatedInstance: any): any {\n\t\t\treturn { id: targetInstance.id };\n\t\t}\n\t\tpublic remove(targetInstance: any, relatedInstance: any): any {}\n\t}\n\texport abstract class ToManyAdapter {\n\t\tpublic add(targetInstance: any, relatedInstance: any): any {\n\t\t\treturn { id: targetInstance.id };\n\t\t}\n\t\tpublic remove(targetInstance: any, relatedInstance: any): any {}\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Abstract } from './abstract-adapters';\n\n\t/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class SimpleAdapter extends Abstract.SimpleAdapter {}\n\t/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToOneAdapter extends Abstract.ToOneAdapter {}\n\t/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToManyAdapter extends Abstract.ToManyAdapter {}\n","/*tslint:disable:max-line-length*/\nimport { Optional } from '@angular/core';\nimport {\n\tgetDependencyInjectionEntries,\n\tMETAKEYS,\n\tupdateInterceptProxyFactory,\n\treadOnlyArrayProxyFactory,\n\tResourceType,\n\tHttpClientOptions,\n\tRequestHandlers,\n\tUnresolvedRequestHandlers,\n\tRawInstanceTemplate\n} from './utils';\nimport { ToManyRelation } from './relations/to-many';\nimport { RelationType } from './relations/relation-configuration';\nimport { ToOneRelation } from './relations/to-one';\nimport { ToManyBuilder, ToOneBuilder, SimpleBuilder } from './request-handlers/default-builders';\n\nimport { ToManyAdapter, ToOneAdapter, SimpleAdapter } from './request-handlers/default-adapters';\n\n/** A dummy class required to allow for an optional argument in the constructor of your model while keeping it compatible with Angular's dependency injection.\n *\n * There is no need to use this type anywhere explicitly.\n *\n * On the other hand, the type {@link RawInstanceTemplate<T>} might come in handy when instantiating instances of your model from plain objects, e.g. when using the [factory method]{@link Resource#factory}.\n *\n */\nexport class RawInstance {}\n\n// @dynamic\nexport class Resource {\n\tprivate _adapter: SimpleAdapter;\n\tprivate _builder: SimpleBuilder;\n\tprivate _toOneAdapter: ToOneAdapter;\n\tprivate _toOneBuilder: ToOneBuilder;\n\tprivate _toManyAdapter: ToManyAdapter;\n\tprivate _toManyBuilder: ToManyBuilder;\n\n\t/** Primary key for your model. */\n\tpublic id: string | number;\n\n\t/**\n\t * Used internally for {@link Resource#collection}. Don't use this one, use {@link Resource#collection} instead.\n\t * @returns T[]\n\t */\n\tpublic static get _instances() {\n\t\treturn readOnlyArrayProxyFactory(Reflect.getMetadata(METAKEYS.INSTANCES, this));\n\t}\n\n\t/**\n\t * Retrieve an immutable list of all of the instances of your model.\n\t * @returns T[]\n\t */\n\tpublic static collection<T extends Resource>(this: ResourceType<T>): T[] {\n\t\treturn this._instances;\n\t}\n\n\t/**\n\t * Instantiate multiple instances from a collection of templates.\n\t * @param  Array<{}> input\n\t * @returns Array<T> An array of instances of your model.\n\t */\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: Array<{}>): Array<T>;\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: {}): T;\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: {} | Array<{}>): T | Array<T> {\n\t\tif (input instanceof Array) {\n\t\t\treturn <T[]>input.map(ro => new this(ro));\n\t\t} else if (input instanceof Object) {\n\t\t\treturn <T>new this(input);\n\t\t} else {\n\t\t\tthrow new TypeError('Overload error');\n\t\t}\n\t}\n\t/**\n\t * Find a locally available instance of your model by id. Does not make any requests.\n\t * @param  number id\n\t * @returns T\n\t */\n\tpublic static find<T extends Resource>(this: ResourceType<T>, id: number): T | undefined {\n\t\treturn this.collection().find((i: any) => i.id === id);\n\t}\n\n\t/**\n\t * Runs the fetch pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<T>\n\t */\n\tpublic static async fetch<T extends Resource>(this: ResourceType<T>, options: HttpClientOptions = {}): Promise<T[]> {\n\t\tconst injections = getDependencyInjectionEntries(this);\n\t\tconst adapter = injections[0];\n\t\tconst builder = injections[1];\n\t\tconst resourceName = Reflect.getMetadata(METAKEYS.NAME, this);\n\n\t\tconst response = await builder.fetch(resourceName, options);\n\t\tconst rawInstances = adapter.parseIncoming(response);\n\t\treturn this.factory<T>(rawInstances);\n\t}\n\t/**\n\t * Call this method to get an empty template for your model. This can for example be useful to use as a model for forms.\n\t * @returns A raw instance template object.\n\t */\n\tpublic static template<T extends Resource>(this: ResourceType<T>): RawInstanceTemplate<T> {\n\t\tconst rawInstance = {};\n\t\tReflect.getMetadata(METAKEYS.FIELDS, this).forEach((field: string) => (rawInstance[field] = undefined));\n\t\treturn (rawInstance as any) as RawInstanceTemplate<T>;\n\t}\n\n\t/**\n\t * Do not override the constructor unless you're know what you're doing. If you think you need it, be sure the check out the source code to see make sure your implementation is not messing with anything internally.\n\t *\n\t * @param RawInstance rawInstance A template from which a new instance of your model will be instantiate. If this parameter is omitted, the model will create an instance from the models metadata. If the parameter is included, it **MUST** minimally include all the keys as decorated with {@link Field}, {@link ToOne}, {@link ToMany} in the model definition with. The type `RawInstance` is just a dummy type that is required to make it work with Angular's dependency injection.\n\t * @param SimpleAdapter simpleAdapter The request content adapter for Simple resource requests.\n\t * @param SimpleBuilder simpleBuilder The request builder for Simple resource requests.\n\t * @param ToOneAdapter toOneAdapter The request content adapter for ToOne relationship requests\n\t * @param ToOneBuilder toOneBuilder The request builder for  ToOne relationship requests\n\t * @param ToManyAdapter toManyAdapter The request content adapter for ToMany relationship requests\n\t * @param ToManyBuilder toManyBuilder The request builder for  ToMany relationship requests\n\t */\n\tconstructor(\n\t\t@Optional() rawInstance?: RawInstance /* need to figure out how to refer to inheriting type here */,\n\t\tsimpleAdapter?: SimpleAdapter,\n\t\tsimpleBuilder?: SimpleBuilder,\n\t\ttoOneAdapter?: ToOneAdapter,\n\t\ttoOneBuilder?: ToOneBuilder,\n\t\ttoManyAdapter?: ToManyAdapter,\n\t\ttoManyBuilder?: ToManyBuilder\n\t) {\n\t\tconst requestHandlers: UnresolvedRequestHandlers = [\n\t\t\tsimpleAdapter,\n\t\t\tsimpleBuilder,\n\t\t\ttoOneAdapter,\n\t\t\ttoOneBuilder,\n\t\t\ttoManyAdapter,\n\t\t\ttoManyBuilder\n\t\t];\n\n\t\t/**  The constructor can be called by the dependency injector or by the user. In the former case, assuming that the user did not manually inject the requestHandlers, only the first parameter will be falsy. In the latter case, only the first parameter will be truthy, in which case we will retrieve the injections by getDependencyInjectionEntries (see _handleInjections internal method). */\n\t\tconst instantationByAngularDI = this._handleInjections(requestHandlers);\n\t\tif (instantationByAngularDI && rawInstance === null) {\n\t\t\treturn this;\n\t\t}\n\t\tlet _rawInstance: any;\n\t\tif (!rawInstance) {\n\t\t\t_rawInstance = this.ctor.template();\n\t\t} else {\n\t\t\t_rawInstance = rawInstance;\n\t\t\t_rawInstance.id = _rawInstance.id || undefined;\n\t\t\tconst alreadyExisting = this.ctor.find(_rawInstance.id);\n\t\t\tif (alreadyExisting) {\n\t\t\t\treturn alreadyExisting;\n\t\t\t}\n\t\t}\n\n\t\tthis._populateFields(_rawInstance);\n\t\tthis._populateRelations();\n\t\tthis.onInit(_rawInstance);\n\t\tconst proxyInstance = updateInterceptProxyFactory(this);\n\t\tReflect.defineMetadata(METAKEYS.UPDATED, {}, proxyInstance);\n\t\tthis._metaAdd(proxyInstance);\n\t\treturn proxyInstance;\n\t}\n\n\t/**\n\t * Do some business logic upon initialization. This method is called by the constructor; do not override constructor unless you know what you're doing\n\t * @param rawInstance the raw instance template as consumed by the constructor\n\t * @returns void You cannot return anything from the onInit hook.\n\t */\n\tpublic onInit(rawInstance: any): void {}\n\n\t/**\n\t * Runs the save pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<T>\n\t */\n\tpublic async save(options: HttpClientOptions = {}): Promise<this> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tconst body = this._adapter.save(this);\n\t\tconst response = await this._builder.save(name, body, options);\n\t\tconst rawInstance = this._adapter.parseIncoming(response);\n\t\treturn this.ctor.factory(<Object>rawInstance);\n\t}\n\n\t/**\n\t * Runs the update pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<void>\n\t */\n\tpublic async update(options: HttpClientOptions = {}): Promise<void> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tconst affectedKeys = Reflect.getMetadata(METAKEYS.UPDATED, this);\n\t\tconst body = this._adapter.update(this, affectedKeys);\n\t\tawait this._builder.update(name, body, options);\n\t}\n\n\t/**\n\t * Runs the delete pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<void>\n\t */\n\tpublic async delete(options: HttpClientOptions = {}): Promise<void> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tawait this._builder.delete(name, this, options);\n\t\tthis._metaRemove();\n\t}\n\n\t/** @internal */\n\tprivate get ctor(): ResourceType<this> {\n\t\treturn <ResourceType<this>>this.constructor;\n\t}\n\t/** @internal */\n\tprivate _populateFields(rawInstance: any) {\n\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, this.constructor) as Array<string>;\n\t\tfields.forEach(field => {\n\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, this.constructor, field);\n\t\t\tif (map && rawInstance.hasOwnProperty(map)) {\n\t\t\t\tthis[field] = rawInstance[map];\n\t\t\t} else if (rawInstance.hasOwnProperty(field)) {\n\t\t\t\tthis[field] = rawInstance[field];\n\t\t\t} else if (!rawInstance.hasOwnProperty(field)) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Expected key ${field} for instance of class ${Reflect.getMetadata(METAKEYS.NAME, this.constructor)} but it wasn't included`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\t/** @internal */\n\tprivate _populateRelations() {\n\t\tconst relations = Reflect.getMetadata(METAKEYS.RELATIONS, this.constructor);\n\t\tReflect.ownKeys(relations).forEach(key => {\n\t\t\tconst config = relations[key];\n\t\t\tswitch (config.type) {\n\t\t\t\tcase RelationType.ToOne:\n\t\t\t\t\tthis[key] = new ToOneRelation(this, config, this._toOneAdapter, this._toOneBuilder);\n\t\t\t\t\tbreak;\n\t\t\t\tcase RelationType.ToMany:\n\t\t\t\t\tthis[key] = new ToManyRelation(this, config, this._toManyAdapter, this._toManyBuilder);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error('shouldnt come here');\n\t\t\t}\n\t\t});\n\t}\n\n\t/** @internal add instance to the metadata instance list*/\n\tprivate _metaAdd(instance: this) {\n\t\tif (this.id) {\n\t\t\tconst list = Reflect.getMetadata(METAKEYS.INSTANCES, this.constructor);\n\t\t\tlist.push(instance);\n\t\t}\n\t}\n\n\t/** @internal remove instance from the metadata instance list*/\n\tprivate _metaRemove() {\n\t\tconst list = Reflect.getMetadata(METAKEYS.INSTANCES, this.constructor);\n\t\tfor (let n = 0; n < list.length; n++) {\n\t\t\tif (list[n].id === this.id) {\n\t\t\t\tlist.splice(n, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate _handleInjections(dependencies: UnresolvedRequestHandlers) {\n\t\t// the assumption is that if (at least one) of the injections was undefined, the\n\t\t// instantiation was not done by Angulars dependency injection.\n\t\tconst instantationByAngularDI = !dependencies.includes(undefined);\n\t\tif (!instantationByAngularDI) {\n\t\t\tdependencies = getDependencyInjectionEntries(this.ctor) as RequestHandlers;\n\t\t}\n\t\tconst filledDependencies = dependencies as RequestHandlers;\n\t\tthis._adapter = filledDependencies[0];\n\t\tthis._builder = filledDependencies[1];\n\t\tthis._toOneAdapter = filledDependencies[2];\n\t\tthis._toOneBuilder = filledDependencies[3];\n\t\tthis._toManyAdapter = filledDependencies[4];\n\t\tthis._toManyBuilder = filledDependencies[5];\n\t\treturn instantationByAngularDI;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Resource } from './resource.core';\nimport { RelationType, RelationConfiguration } from './relations/relation-configuration';\nimport { toDash, initMetaData, METAKEYS } from './utils';\n\n/**\n * Options object that can be passed to the {@link Model} when decorating your model. Currently it is only possible to configure `name`, which is used in\n * generating the urls for requests.\n *\n * If you have a custom `uglify.config.js` file in which `mangle` is set to false, you do not need to use this.\n *\n * If you don't, then Angular's AOT will obfuscate `constructor.name`, and this library will not be able to construct URL according to the name of your model.\n * To prevent this from happening, you can pass `name` in the decorator options.\n *\n * Alternatively, you can use `name` to provide for a custom representation in the url.\n *\n * @example\n * // uglify.config.js with mangle = false\n * @Model() // will produce calls to .../my-dummy-models/...\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model() // will not work!\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model({name: 'MyDummyModel'}) // will produce calls to .../my-dummy-models/...\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model({name: 'MyAlternativeName'}) // will produce calls to .../my-alternative-name/...\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model({name: 'my-alternative-name'}) // will produce calls to .../my-alternative-name/...\n * class MyDummyModel extends Resource {}\n */\nexport interface ModelOptions {\n\tname?: string;\n}\n/**\n * Add this class decorator to your model to turn it into a `Resource` model, which means that it is considered as an endpoint on your API.\n *\n * See {@link ModelOptions} on how to configure the name used in URLs.\n *\n * This decorator is responsible for setting metadata, which is used internally, on the constructor of your class.\n *\n * @param  ModelOptions={} options\n */\nexport function Model(options?: ModelOptions) {\n\treturn <T extends Resource>(ctor: any) => {\n\t\tctor = Injectable({ providedIn: 'root' })(ctor);\n\t\tinitMetaData(ctor);\n\t\tconst resourceName = options && options.name ? (options.name.includes('-') ? options.name : toDash(options.name)) : toDash(ctor.name);\n\t\tReflect.defineMetadata(METAKEYS.NAME, resourceName, ctor);\n\n\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, ctor);\n\t\tconst attributes = Reflect.getMetadata(METAKEYS.ATTRIBUTES, ctor);\n\t\tReflect.defineMetadata(METAKEYS.FIELDS, fields.concat(attributes), ctor);\n\n\t\treturn ctor;\n\t};\n}\n\n/**\n * Use this field decorator to parse the corresponding field from a json response by your API.\n * @param string mapFrom? An identifier to map keys coming from an incoming json response to keys in your model.\n *  For example: the api response has a key `commentText: 'nice article!` but the key in the model is `commentContent`.\n * Then the decorator should be used as `Field('commentText').\n */\nexport function Field(mapFrom?: string) {\n\treturn <T extends Resource>(target: any, key: string) => {\n\t\tconst ctor = target.constructor;\n\t\tinitMetaData(ctor);\n\t\tReflect.defineMetadata(METAKEYS.MAP, mapFrom, ctor, key);\n\t\tReflect.getMetadata(METAKEYS.ATTRIBUTES, ctor).push(key);\n\t};\n}\n\n/**\n * Use this field decorator to parse the corresponding field from a json response by your API and to identify the key as a To-One relationship.\n * @param Function RelatedResource The constructor function of the model that is targeted for the To-Many relation.\n * @param string mapFrom? An identifier to map keys coming from an incoming json response to keys in your model.\n *  For example: the api response has a key `commentText: 'nice article!` but the key in the model is `commentContent`.\n * Then the decorator should be used as `Field('commentText').\n */\nexport const ToOne = function<TRelated extends Resource>(RelatedResource: any, mapFrom?: string) {\n\treturn (target: any, key: string) => {\n\t\tconst ctor = target.constructor;\n\t\tinitMetaData(ctor);\n\t\tReflect.defineMetadata(METAKEYS.MAP, mapFrom, ctor, key);\n\t\tReflect.getMetadata(METAKEYS.FIELDS, ctor).push(key);\n\t\tReflect.getMetadata(METAKEYS.RELATIONS, ctor)[key] = new RelationConfiguration(ctor, RelatedResource, key, RelationType.ToOne);\n\t};\n};\n\n/**\n * Use this field decorator to parse the corresponding field from a json response by your API and to identify the key as a To-Many relationship.\n * @param Function RelatedResource The constructor function of the model that is targeted for the To-Many relation.\n * @param string mapFrom? An identifier to map keys coming from an incoming json response to keys in your model.\n *  For example: the api response has a key `commentText: 'nice article!` but the key in the model is `commentContent`.\n * Then the decorator should be used as `Field('commentText').\n */\nexport const ToMany = function <TRelated extends Resource>(RelatedResource: any, mapFrom?: string) {\n\treturn (target: any, key: string) => {\n\t\tconst ctor = target.constructor;\n\t\tinitMetaData(ctor);\n\t\tReflect.defineMetadata(METAKEYS.MAP, mapFrom, ctor, key);\n\t\tReflect.getMetadata(METAKEYS.FIELDS, ctor).push(key);\n\t\tReflect.getMetadata(METAKEYS.RELATIONS, ctor)[key] = new RelationConfiguration(ctor, RelatedResource, key, RelationType.ToMany);\n\t};\n};\n","import 'reflect-metadata';\nimport { NgModule, ModuleWithProviders, Injector, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Resource } from './resource.core';\nimport { Field, ToMany, ToOne, Model } from './resource.decorators';\nimport { ToManyRelation } from './relations/to-many';\nimport { ToOneRelation } from './relations/to-one';\nimport { InjectorContainer, ResourceModuleConfiguration, ResourceModuleConfigurationWithProviders,\n\tHttpClientOptions, toPlural, toDash, toPluralDash, HttpVerb, METAKEYS } from './utils';\nimport { Abstract as AbstractAdapters } from './request-handlers/abstract-adapters';\nimport { Abstract as AbstractBuilders } from './request-handlers/abstract-builders';\nimport { ToManyAdapter, ToOneAdapter, SimpleAdapter } from './request-handlers/default-adapters';\nimport { ToManyBuilder, ToOneBuilder, SimpleBuilder } from './request-handlers/default-builders';\n\n\n/** @internal */\n@NgModule({ imports: [HttpClientModule] })\nexport class ResourceRootModule {\n\tconstructor(injector: Injector) {\n\t\tInjectorContainer.instance = injector;\n\t}\n}\n\n@NgModule({ imports: [HttpClientModule] })\nclass ResourceModule {\n\tstatic forRoot(options: ResourceModuleConfigurationWithProviders = {}): ModuleWithProviders {\n\t\tconst config: Provider[] = [{ provide: ResourceModuleConfiguration, useValue: { rootPath: options.rootPath } }];\n\t\treturn {\n\t\t\tngModule: ResourceRootModule,\n\t\t\tproviders: config.concat(options.requestHandler || [])\n\t\t};\n\t}\n}\n\nexport {\n\tResourceModule,\n\tResource,\n\tField,\n\tToOne,\n\tToMany,\n\tModel,\n\tToManyRelation,\n\tToOneRelation,\n\tAbstractAdapters,\n\tAbstractBuilders,\n\tResourceModuleConfigurationWithProviders,\n\tToManyAdapter,\n\tToOneAdapter,\n\tSimpleAdapter,\n\tToManyBuilder,\n\tToOneBuilder,\n\tSimpleBuilder,\n\tResourceModuleConfiguration,\n\tHttpClientOptions,\n\ttoPlural,\n\ttoDash,\n\ttoPluralDash,\n\tHttpVerb,\n\tMETAKEYS\n};\n"],"names":["Abstract","SimpleAdapter","SimpleBuilder","ToOneAdapter","ToOneBuilder","ToManyAdapter","ToManyBuilder"],"mappings":"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"}