{"version":3,"file":"to-one.js","sourceRoot":"","sources":["../../../src/relations/to-one.ts"],"names":[],"mappings":";;;;;AAEA,OAAO,EAAE,QAAQ,EAAqB,MAAM,UAAU,CAAC;;;;;;AAIvD;;;;;;AAAA;IAGC,uBACkB,eACA,gBACA,UACA;QAHA,kBAAa,GAAb,aAAa;QACb,mBAAc,GAAd,cAAc;QACd,aAAQ,GAAR,QAAQ;QACR,aAAQ,GAAR,QAAQ;;QAEzB,IAAM,SAAS,GAAO,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;QAE1E,IAAI,CAAC,QAAQ,GAAG,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC9F;;;;;IAQY,4BAAI;;;;;;;;;6BACZ,CAAA,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAA,EAAtB,wBAAsB;wBACzB,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;wBAAnB,SAAmB,CAAC;;4BAEpB,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAA;;wBAA7B,SAA6B,CAAC;;;;;;;;;;;;IAUnB,8BAAM;;;;;cAAC,OAA+B;QAA/B,wBAAA,EAAA,YAA+B;;;;;;6BAC9C,IAAI,CAAC,QAAQ,EAAb,wBAAa;wBACV,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;wBAChF,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;wBACtF,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;wBACrE,qBAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,EAAA;;wBAApF,SAAoF,CAAC;wBACrF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;;;;;;;;;;;;IASV,2BAAG;;;;;;cAAC,cAAwB,EAAE,OAA+B;QAA/B,wBAAA,EAAA,YAA+B;;;;;;wBACnE,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;wBAChF,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;wBACtF,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;wBACnE,qBAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,EAAA;;wBAAjF,SAAiF,CAAC;wBAClF,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;;;;;;wBA5DjC;IA8DC,CAAA;;;;;;AAxDD,yBAwDC","sourcesContent":["import { RelationConfiguration } from './relation-configuration';\nimport { Resource } from '../resource.core';\nimport { METAKEYS, HttpClientOptions } from '../utils';\nimport { ToOneBuilder } from '../request-handlers/default-builders';\nimport { ToOneAdapter } from '../request-handlers/default-adapters';\n\nexport class ToOneRelation<THost extends Resource, TRelated extends Resource> {\n\t/** The references to the related instance */\n\tpublic instance: TRelated | null;\n\tconstructor(\n\t\tprivate readonly _hostInstance: THost,\n\t\tprivate readonly _configuration: RelationConfiguration<THost, TRelated>,\n\t\tprivate readonly _adapter: ToOneAdapter,\n\t\tprivate readonly _builder: ToOneBuilder\n\t) {\n\t\tconst rawObject: {} = _hostInstance[_configuration.keyOnInstance] || null;\n\n\t\tthis.instance = rawObject === null ? null : _configuration.RelatedResource.factory(rawObject);\n\t}\n\n\t// TODO: IMPLEMENT FETCH (LAZY GETTING OF RELATIONS)\n\n\t/**\n\t * Synchronize the model without using explicitly using `set` or `add`. This way it is possible to update a relation using e.g. DOM interactions without making premature requests.\n\t * @returns Promise<void>\n\t */\n\tpublic async sync(): Promise<void> {\n\t\tif (this.instance === null) {\n\t\t\tawait this.remove();\n\t\t} else {\n\t\t\tawait this.set(this.instance);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the delete pipeline of your model for a related resource using the To-One request adapter and builder.\n\t * @param  TRelated targetInstance\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise\n\t */\n\tpublic async remove(options: HttpClientOptions = {}): Promise<void> {\n\t\tif (this.instance) {\n\t\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\t\t\tconst body = this._adapter.remove(this.instance, this._hostInstance);\n\t\t\tawait this._builder.remove(relatedName, hostName, body, this._hostInstance, options);\n\t\t\tthis.instance = null;\n\t\t}\n\t}\n\t/**\n\t * Runs the add pipeline of your model for a related resource using the To-One request adapter and builder.\n\t * @param  TRelated targetInstance\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise\n\t */\n\tpublic async set(targetInstance: TRelated, options: HttpClientOptions = {}): Promise<void> {\n\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\t\tconst body = this._adapter.add(targetInstance, this._hostInstance);\n\t\tawait this._builder.add(relatedName, hostName, body, this._hostInstance, options);\n\t\tthis.instance = targetInstance;\n\t}\n}\n"]}