{"version":3,"file":"ngx-api-orm-core.umd.js","sources":["../../node_modules/tslib/tslib.es6.js","../../../../packages/common/http/src/backend.ts","../../../../packages/common/http/src/headers.ts","../../../../packages/common/http/src/params.ts","../../../../packages/common/http/src/request.ts","../../../../packages/common/http/src/response.ts","../../../../packages/common/http/src/client.ts","../../../../packages/common/http/src/interceptor.ts","../../../../packages/common/http/src/jsonp.ts","../../../../packages/common/http/src/xhr.ts","../../../../packages/common/http/src/xsrf.ts","../../../../packages/common/http/src/module.ts","../../node_modules/reflect-metadata/Reflect.ts","../package/src/utils.ts","../package/src/relations/to-many.ts","../package/src/relations/relation-configuration.ts","../package/src/relations/to-one.ts","../package/src/request-handlers/abstract-builders.ts","../package/src/request-handlers/default-builders.ts","../package/src/request-handlers/abstract-adapters.ts","../package/src/request-handlers/default-adapters.ts","../package/src/resource.core.ts","../package/src/resource.decorators.ts","../package/src/resource.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n *\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n *\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Immutable set of Http headers, with lazy parsing.\n *\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers !: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  // TODO(issue/24571): remove '!'.\n  private lazyInit !: HttpHeaders | Function | null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key) !.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n\n  delete (name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key) !);\n      this.normalizedNames.set(key, other.normalizedNames.get(key) !);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value !;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key) !, this.headers.get(key) !));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n *\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n *\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  encodeValue(value: string): string { return standardEncoding(value); }\n\n  decodeKey(key: string): string { return decodeURIComponent(key); }\n\n  decodeValue(value: string) { return decodeURIComponent(value); }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\ninterface Update {\n  param: string;\n  value?: string;\n  op: 'a'|'d'|'s';\n}\n\n/** Options used to construct an `HttpParams` instance. */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP params in URL-query-string format. Mutually exclusive with\n   * `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP params. Mutally exclusive with `fromString`. */\n  fromObject?: {[param: string]: string | string[]};\n\n  /** Encoding codec used to parse and serialize the params. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n *\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        this.map !.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Check whether the body has one or more values for the given parameter name.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map !.has(param);\n  }\n\n  /**\n   * Get the first value for the given parameter name, or `null` if it's not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map !.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Get all values for the given parameter name, or `null` if it's not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map !.get(param) || null;\n  }\n\n  /**\n   * Get all the parameter names for this body.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map !.keys());\n  }\n\n  /**\n   * Construct a new body with an appended value for the given parameter name.\n   */\n  append(param: string, value: string): HttpParams { return this.clone({param, value, op: 'a'}); }\n\n  /**\n   * Construct a new body with a new value for the given parameter name.\n   */\n  set(param: string, value: string): HttpParams { return this.clone({param, value, op: 's'}); }\n\n  /**\n   * Construct a new body with either the given value for the given parameter\n   * removed, if a value is given, or all values for the given parameter removed\n   * if not.\n   */\n  delete (param: string, value?: string): HttpParams { return this.clone({param, value, op: 'd'}); }\n\n  /**\n   * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          return this.map !.get(key) !.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        .join('&');\n  }\n\n  private clone(update: Update): HttpParams {\n    const clone = new HttpParams({ encoder: this.encoder } as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat([update]);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map !.set(key, this.cloneFrom !.map !.get(key) !));\n      this.updates !.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map !.get(update.param) : undefined) || [];\n            base.push(update.value !);\n            this.map !.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map !.get(update.param) || [];\n              const idx = base.indexOf(update.value);\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map !.set(update.param, base);\n              } else {\n                this.map !.delete(update.param);\n              }\n            } else {\n              this.map !.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n *\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers !: HttpHeaders;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params !: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        Array.isArray(this.body)) {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders ![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams ![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(\n        method, url, body, {\n                               params, headers, reportProgress, responseType, withCredentials,\n                           });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n *\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n *\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n *\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n *\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n *\n */\nexport interface HttpSentEvent { type: HttpEventType.Sent; }\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n *\n */\nexport interface HttpUserEvent<T> { type: HttpEventType.User; }\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n *\n */\nexport type HttpEvent<T> =\n    HttpSentEvent | HttpHeaderResponse | HttpResponse<T>| HttpProgressEvent | HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n *\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type !: HttpEventType.Response | HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = 200, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n *\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n *\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any | null; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n *\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  readonly ok = false;\n\n  constructor(init: {\n    error?: any; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message =\n          `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of } from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders | {[header: string]: string | string[]},\n      observe?: HttpObserve,\n      params?: HttpParams | {[param: string]: string | string[]},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\n      withCredentials?: boolean,\n    },\n    body: T | null): any {\n  return {\n    body,\n    headers: options.headers,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\nexport type HttpObserve = 'body' | 'events' | 'response';\n\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n *\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Send the given `HttpRequest` and return a stream of `HttpEvents`.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Construct a request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Construct a request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct a request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct a request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]},\n    observe: 'events', reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct a request which interprets the body as an `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct a request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct a request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Construct a request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Construct a request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct a request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct a request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct a request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct a request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Construct a request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct a request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Construct a request in a manner where response type and requested `Observable` are not known\n   * statically.\n   *\n   * @return an `Observable` of whatever was requested, typed to `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]},\n    observe?: HttpObserve,\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * This method can be called in one of two ways. Either an `HttpRequest`\n   * instance can be passed directly as the only parameter, or a method can be\n   * passed as the first parameter, a string URL as the second, and an\n   * options hash as the third.\n   *\n   * If a `HttpRequest` object is passed directly, an `Observable` of the\n   * raw `HttpEvent` stream will be returned.\n   *\n   * If a request is instead built by providing a URL, the options object\n   * determines the return type of `request()`. In addition to configuring\n   * request parameters such as the outgoing headers and/or the body, the options\n   * hash specifies two key pieces of information about the request: the\n   * `responseType` and what to `observe`.\n   *\n   * The `responseType` value determines how a successful response body will be\n   * parsed. If `responseType` is the default `json`, a type interface for the\n   * resulting object may be passed as a type parameter to `request()`.\n   *\n   * The `observe` value determines the return type of `request()`, based on what\n   * the consumer is interested in observing. A value of `events` will return an\n   * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n   * including progress events by default. A value of `response` will return an\n   * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n   * depends on the `responseType` and any optionally provided type parameter.\n   * A value of `body` will return an `Observable<T>` with the same `T` body type.\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first as HttpRequest<any>;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming GET unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({ fromObject: options.params } as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url !, (options.body !== undefined ? options.body : null), {\n        headers,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of (req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Construct a DELETE request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct a DELETE request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Construct a DELETE request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as an `Object`.\n   */\n  delete (url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct a DELETE request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as type `T`.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause the configured\n   * DELETE request to be executed on the server. See the individual overloads for\n   * details of `delete()`'s return type based on the provided options.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Construct a GET request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Construct a GET request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct a GET request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct a GET request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct a GET request which interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct a GET request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct a GET request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Construct a GET request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Construct a GET request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct a GET request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct a GET request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct a GET request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct a GET request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Construct a GET request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as an `Object`.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct a GET request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as type `T`.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause the configured\n   * GET request to be executed on the server. See the individual overloads for\n   * details of `get()`'s return type based on the provided options.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n\n    /**\n   * Construct a HEAD request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  }): Observable<ArrayBuffer>;\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct a HEAD request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Construct a HEAD request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as an `Object`.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct a HEAD request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as type `T`.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause the configured\n   * HEAD request to be executed on the server. See the individual overloads for\n   * details of `head()`'s return type based on the provided options.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Construct a JSONP request for the given URL and name of the callback parameter.\n   *\n   * @return an `Observable` of the response object as an `Object`\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Construct a JSONP request for the given URL and name of the callback parameter.\n   *\n   * @return an `Observable` of the response object as type `T`.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause a request\n   * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n   *\n   * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n   * If no such interceptor is reached, then the `JSONP` request will likely be\n   * rejected by the configured backend.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Make an OPTIONS request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as an `Object`.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct an OPTIONS request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as type `T`.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause the configured\n   * OPTIONS request to be executed on the server. See the individual overloads for\n   * details of `options()`'s return type based on the provided options.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Construct a PATCH request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct a PATCH request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Construct a PATCH request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as an `Object`.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct a PATCH request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as type `T`.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause the configured\n   * PATCH request to be executed on the server. See the individual overloads for\n   * details of `patch()`'s return type based on the provided options.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Construct a POST request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Construct a POST request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct a POST request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct a POST request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct a POST request which interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct a POST request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct a POST request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Construct a POST request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Construct a POST request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct a POST request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct a POST request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct a POST request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct a POST request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Construct a POST request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as an `Object`.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct a POST request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as type `T`.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause the configured\n   * POST request to be executed on the server. See the individual overloads for\n   * details of `post()`'s return type based on the provided options.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns it.\n   *\n   * @return an `Observable` of the body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Construct a PUT request which interprets the body as a `Blob` and returns it.\n   *\n   * @return an `Observable` of the body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Construct a PUT request which interprets the body as text and returns it.\n   *\n   * @return an `Observable` of the body as a `string`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Construct a PUT request which interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Construct a PUT request which interprets the body as text and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Construct a PUT request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Construct a PUT request which interprets the body as JSON and returns the full event stream.\n   *\n   * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events', responseType?: 'json', withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Construct a PUT request which interprets the body as a `Blob` and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Construct a PUT request which interprets the body as text and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Construct a PUT request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Construct a PUT request which interprets the body as JSON and returns the full response.\n   *\n   * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Construct a PUT request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as an `Object`.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Construct a PUT request which interprets the body as JSON and returns it.\n   *\n   * @return an `Observable` of the body as type `T`.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` which, when subscribed, will cause the configured\n   * PUT request to be executed on the server. See the individual overloads for\n   * details of `put()`'s return type based on the provided options.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n *\n */\nexport interface HttpInterceptor {\n  /**\n   * Intercept an outgoing `HttpRequest` and optionally transform it or the\n   * response.\n   *\n   * Typically an interceptor will transform the outgoing request before returning\n   * `next.handle(transformedReq)`. An interceptor may choose to transform the\n   * response event stream as well, by applying additional Rx operators on the stream\n   * returned by `next.handle()`.\n   *\n   * More rarely, an interceptor may choose to completely handle the request itself,\n   * and compose a new event stream instead of invoking `next.handle()`. This is\n   * acceptable behavior, but keep in mind further interceptors will be skipped entirely.\n   *\n   * It is also rare but valid for an interceptor to return multiple responses on the\n   * event stream for a single request.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nexport class HttpInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n *\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');\n\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse} from './response';\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext { [key: string]: (data: any) => void; }\n\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n *\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string { return `ng_jsonp_callback_${nextRequestId++}`; }\n\n  /**\n   * Process a JSONP request and return an event stream of the results.\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Whether the request has been cancelled (and thus any other callbacks)\n      // should be ignored.\n      let cancelled: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Next, make sure the request wasn't cancelled in the meantime.\n        if (cancelled) {\n          return;\n        }\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // Do nothing if the request has been cancelled.\n        if (cancelled) {\n          return;\n        }\n\n        // Cleanup the page.\n        cleanup();\n\n        // Check whether the response callback has run.\n        if (!finished) {\n          // It hasn't, something went wrong with the request. Return an error via\n          // the Observable error path. All JSONP errors have status 0.\n          observer.error(new HttpErrorResponse({\n            url,\n            status: 0,\n            statusText: 'JSONP Error',\n            error: new Error(JSONP_ERR_NO_CALLBACK),\n          }));\n          return;\n        }\n\n        // Success. body either contains the response body or null if none was\n        // returned.\n        observer.next(new HttpResponse({\n          body,\n          status: 200,\n          statusText: 'OK', url,\n        }));\n\n        // Complete the stream, the response is over.\n        observer.complete();\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        // If the request was already cancelled, no need to emit anything.\n        if (cancelled) {\n          return;\n        }\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error', url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        // Track the cancellation so event listeners won't do anything even if already scheduled.\n        cancelled = true;\n\n        // Remove the event listeners so they won't run if the events later fire.\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n}\n\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n *\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private jsonp: JsonpClientBackend) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.method === 'JSONP') {\n      return this.jsonp.handle(req as HttpRequest<never>);\n    }\n    // Fall through for normal HTTP requests.\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpUploadProgressEvent} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n *\n */\nexport abstract class XhrFactory { abstract build(): XMLHttpRequest; }\n\n/**\n * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n *\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\n}\n\n/**\n * Tracks a response from the server that does not yet have a body.\n */\ninterface PartialResponse {\n  headers: HttpHeaders;\n  status: number;\n  statusText: string;\n  url: string;\n}\n\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n *\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Process a request and return a stream of response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the JsonpClientModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n        const status: number = xhr.status === 1223 ? 204 : xhr.status;\n        const statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let body: any|null = null;\n\n        if (status !== 204) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? 200 : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = { error, text: body } as HttpJsonParseError;\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = (error: ErrorEvent) => {\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n      let sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = (event: ProgressEvent) => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress: HttpUploadProgressEvent = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded,\n        };\n\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n\n        // Send the event.\n        observer.next(progress);\n      };\n\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody);\n      observer.next({type: HttpEventType.Sent});\n\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('load', onLoad);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        xhr.abort();\n      };\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ÉµparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME');\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME');\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n *\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(\n      private tokenService: HttpXsrfTokenExtractor,\n      @Inject(XSRF_HEADER_NAME) private headerName: string) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n        lcUrl.startsWith('https://')) {\n      return next.handle(req);\n    }\n    const token = this.tokenService.getToken();\n\n    // Be careful not to overwrite an existing header of the same name.\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({headers: req.headers.set(this.headerName, token)});\n    }\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Injector, ModuleWithProviders, NgModule} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler, NoopInterceptor} from './interceptor';\nimport {JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {BrowserXhr, HttpXhrBackend, XhrFactory} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME} from './xsrf';\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[] | null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n *\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    {provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN'},\n    {provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN'},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        {provide: HttpXsrfInterceptor, useClass: NoopInterceptor},\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        options.cookieName ? {provide: XSRF_COOKIE_NAME, useValue: options.cookieName} : [],\n        options.headerName ? {provide: XSRF_HEADER_NAME, useValue: options.headerName} : [],\n      ],\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\n@NgModule({\n  /**\n   * Optional configuration for XSRF protection.\n   */\n  imports: [\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN',\n    }),\n  ],\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    BrowserXhr,\n    {provide: XhrFactory, useExisting: BrowserXhr},\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\n@NgModule({\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true},\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n",{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/Moeys/Code/ngx-api-orm/core/node_modules/reflect-metadata/Reflect.ts"},"import { Injector, Provider } from '@angular/core';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Resource } from './resource.core';\nimport { RelationConfiguration, RelationType } from './relations/relation-configuration';\nimport { ToManyBuilder, ToOneBuilder, SimpleBuilder } from './request-handlers/default-builders';\nimport { ToManyAdapter, ToOneAdapter, SimpleAdapter } from './request-handlers/default-adapters';\n\nexport function toDash(name: string): string {\n\tconst split = name.split('');\n\tsplit[0] = split[0].toLowerCase();\n\tconst splitJoin = split.join('');\n\treturn splitJoin.replace(/([A-Z])/g, $1 => {\n\t\treturn '-' + $1.toLowerCase();\n\t});\n}\n\nexport function toPluralDash(name: string) {\n\treturn toPlural(toDash(name));\n}\n\nexport function toPlural(name: string) {\n\treturn name + 's';\n}\n\n/** @internal */\nexport let InjectorContainer: { [instance: string]: Injector | undefined } = { instance: undefined };\n\n/** @internal */\nexport function getDependencyInjectionEntries(token: any): RequestHandlers {\n\tif (InjectorContainer.instance !== undefined) {\n\t\tconst injector = InjectorContainer.instance;\n\t\tconst injectedInstance = injector.get(token);\n\t\treturn [\n\t\t\tinjectedInstance['_adapter'],\n\t\t\tinjectedInstance['_builder'],\n\t\t\tinjectedInstance['_toOneAdapter'],\n\t\t\tinjectedInstance['_toOneBuilder'],\n\t\t\tinjectedInstance['_toManyAdapter'],\n\t\t\tinjectedInstance['_toManyBuilder']\n\t\t];\n\t}\n\treturn [] as any;\n}\n\nexport enum HttpVerb {\n\tGET = 'get',\n\tPOST = 'post',\n\tPUT = 'put',\n\tPATCH = 'patch',\n\tDELETE = 'delete',\n\n}\n\n/** @internal */\nexport function initMetaData(ctor: any) {\n\tif (!Reflect.hasOwnMetadata(METAKEYS.FIELDS, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.FIELDS, [], ctor);\n\t}\n\tif (!Reflect.hasOwnMetadata(METAKEYS.ATTRIBUTES, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.ATTRIBUTES, [], ctor);\n\t}\n\tif (!Reflect.hasOwnMetadata(METAKEYS.RELATIONS, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.RELATIONS, {}, ctor);\n\t}\n\tif (!Reflect.hasOwnMetadata(METAKEYS.INSTANCES, ctor)) {\n\t\tReflect.defineMetadata(METAKEYS.INSTANCES, [], ctor);\n\t}\n}\n\n/** @internal */\nexport function updateInterceptProxyFactory(targetInstance: Resource) {\n\tconst attributes = Reflect.getMetadata(METAKEYS.ATTRIBUTES, targetInstance.constructor);\n\treturn new Proxy(targetInstance, {\n\t\tset(instance: any, key: string, value: any, proxy: any): boolean {\n\t\t\tif (attributes.indexOf(key) > -1) {\n\t\t\t\tconst updatedFields = Reflect.getMetadata(METAKEYS.UPDATED, proxy);\n\t\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, instance, key);\n\t\t\t\tupdatedFields[map || key] = instance[key];\n\t\t\t}\n\t\t\tinstance[key] = value;\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n/** @internal */\nexport function readOnlyArrayProxyFactory(targetArray: Array<any>) {\n\tconst forbiddenMethods = ['push', 'pop', 'shift', 'unshift'];\n\treturn new Proxy(targetArray, {\n\t\tget(instance: any, key: string, proxy: any): boolean {\n\t\t\tif (forbiddenMethods.indexOf(key) > -1) {\n\t\t\t\tthrow Error(`Operation ${key} not allowed on this readonly array!`);\n\t\t\t}\n\t\t\treturn instance[key];\n\t\t}\n\t});\n}\n\nexport const METAKEYS = {\n\tFIELDS: 'orm:fields',\n\tATTRIBUTES: 'orm:attributes',\n\tRELATIONS: 'orm:relations',\n\tMAP: 'orm:map',\n\tUPDATED: 'orm:updated',\n\tINSTANCES: 'orm:instances',\n\tNAME: 'orm:name'\n};\n\n/** @internal */\nexport class ResourceModuleConfiguration {\n\trootPath?: string;\n}\n\nexport class ResourceModuleConfigurationWithProviders extends ResourceModuleConfiguration {\n\t/** Sets the API root of your app. */\n\trootPath?: string;\n\t/** Allows to conveniently register a collection of request handlers. See the guide on extendability on how to use this. Can be set to {@link JsonApiDotOrg}. */\n\trequestHandler?: Provider[];\n}\n\nexport interface Instantiable<T> {\n\tnew (...args: any[]): T;\n}\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\nexport type RawInstanceTemplate<T extends Resource> = Omit<T, keyof Resource>;\n\nexport interface ResourceType<T> extends Instantiable<T> {\n\t_instances: T[];\n\tcollection<U extends Resource>(this: ResourceType<U>): U[];\n\tfetch<U extends Resource>(this: ResourceType<U>): Promise<U[]>;\n\tfind<U extends Resource>(this: ResourceType<U>, id: number): U | undefined;\n\ttemplate<U extends Resource>(this: ResourceType<U>): RawInstanceTemplate<U>;\n\tfactory<U extends Resource>(this: ResourceType<U>, rawInstance: Array<{}>): Array<U>;\n\tfactory<U extends Resource>(this: ResourceType<U>, rawInstance: {}): U;\n}\n\nexport interface HttpClientOptions {\n\turl?: string;\n\tbody?: any;\n\theaders?: HttpHeaders | { [header: string]: string | string[] };\n\tobserve?: 'body';\n\tparams?: HttpParams | { [param: string]: string | string[] };\n\tresponseType?: 'json';\n\treportProgress?: boolean;\n\twithCredentials?: boolean;\n}\n/** @internal */\nexport type RequestHandlers = [SimpleAdapter, SimpleBuilder, ToOneAdapter, ToOneBuilder, ToManyAdapter, ToManyBuilder];\n\n/** @internal */\nexport type UnresolvedRequestHandlers = [\n\tSimpleAdapter | undefined,\n\tSimpleBuilder | undefined,\n\tToOneAdapter | undefined,\n\tToOneBuilder | undefined,\n\tToManyAdapter | undefined,\n\tToManyBuilder | undefined\n];\n","import { RelationConfiguration } from './relation-configuration';\nimport { Resource } from '../resource.core';\nimport { METAKEYS, HttpClientOptions } from '../utils';\nimport { ToManyBuilder } from '../request-handlers/default-builders';\nimport { ToManyAdapter } from '../request-handlers/default-adapters';\n\n// @dynamic\nexport class ToManyRelation<THost extends Resource, TRelated extends Resource> extends Array<TRelated> {\n\tconstructor(\n\t\tprivate readonly _hostInstance: THost,\n\t\tprivate readonly _configuration: RelationConfiguration<THost, TRelated>,\n\t\tprivate readonly _adapter: ToManyAdapter,\n\t\tprivate readonly _builder: ToManyBuilder\n\t) {\n\t\tsuper();\n\t\tconst rawObjects: Array<{}> = _hostInstance[_configuration.keyOnInstance] || null;\n\t\tif (rawObjects == null) {\n\t\t\treturn;\n\t\t}\n\t\tconst instances = Array.prototype.concat.apply([], [<TRelated[]>_configuration.RelatedResource.factory(rawObjects)]);\n\t\tthis.push(...instances);\n\t}\n\t// TODO: IMPLEMENT FETCH (LAZY GETTING OF RELATIONS)\n\t// TODO: IMPLEMENT SET (LAZY SYNC OF CHANGES: COMPLETE REPLACE)\n\n\t/*tslint:disable semicolon*/\n\t/**\n\t * Runs the add pipeline of your model for a related resource using the To-Many request adapter and builder.\n\t * @param  TRelated relatedInstance\n\t * @param  any={} options\n\t */\n\tpublic add = async (relatedInstance: TRelated, options: HttpClientOptions = {}): Promise<void> => {\n\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\n\t\tif (!(relatedInstance instanceof this._configuration.RelatedResource)) {\n\t\t\tthrow new TypeError('parameter relatedInstance must be of type ' + relatedName);\n\t\t}\n\n\t\tconst body = this._adapter.add(relatedInstance, this._hostInstance);\n\t\tawait this._builder.add(relatedName, hostName, body, this._hostInstance, options);\n\t\tthis.push(relatedInstance);\n\t};\n\n\t/**\n\t * Runs the delete pipeline of your model for a related resource using the To-Many request adapter and builder.\n\t * @param  TRelated relatedInstance\n\t * @param  any={} options\n\t */\n\tpublic remove = async (relatedInstance: TRelated, options: HttpClientOptions = {}) => {\n\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\n\t\tif (this.findIndex(ri => ri.id === relatedInstance.id) === -1) {\n\t\t\tthrow new RangeError('parameter relatedInstance not included in this RelatedResourceCollection');\n\t\t}\n\t\tconst body = this._adapter.remove(relatedInstance, this._hostInstance);\n\t\tawait this._builder.remove(relatedName, hostName, body, this._hostInstance, options);\n\t\tthis._removeInstance(relatedInstance);\n\t};\n\n\t/** @internal */\n\tprivate _removeInstance = (relatedInstance: TRelated) => {\n\t\tfor (let n = 0; n < this.length; n++) {\n\t\t\tif (this[n].id === relatedInstance.id) {\n\t\t\t\tthis.splice(n, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\t/*tslint:enable semicolon*/\n}\n","import { Resource } from '../resource.core';\nimport { ResourceType } from '../utils';\n\n/** @internal */\nexport enum RelationType {\n\tToOne = 'toOne',\n\tToMany = 'toMany',\n\tNone = 'none'\n}\n\n// @dynamic\n/** @internal */\nexport class RelationConfiguration<THost extends Resource, TRelated extends Resource> {\n\tconstructor(\n\t\tpublic readonly HostResource: ResourceType<THost>,\n\t\tpublic readonly RelatedResource: ResourceType<TRelated>,\n\t\tpublic readonly keyOnInstance: any,\n\t\tpublic readonly type: RelationType\n\t) {}\n}\n","import { RelationConfiguration } from './relation-configuration';\nimport { Resource } from '../resource.core';\nimport { METAKEYS, HttpClientOptions } from '../utils';\nimport { ToOneBuilder } from '../request-handlers/default-builders';\nimport { ToOneAdapter } from '../request-handlers/default-adapters';\n\nexport class ToOneRelation<THost extends Resource, TRelated extends Resource> {\n\t/** The references to the related instance */\n\tpublic instance: TRelated | null;\n\tconstructor(\n\t\tprivate readonly _hostInstance: THost,\n\t\tprivate readonly _configuration: RelationConfiguration<THost, TRelated>,\n\t\tprivate readonly _adapter: ToOneAdapter,\n\t\tprivate readonly _builder: ToOneBuilder\n\t) {\n\t\tconst rawObject: {} = _hostInstance[_configuration.keyOnInstance] || null;\n\n\t\tthis.instance = rawObject === null ? null : _configuration.RelatedResource.factory(rawObject);\n\t}\n\n\t// TODO: IMPLEMENT FETCH (LAZY GETTING OF RELATIONS)\n\n\t/**\n\t * Synchronize the model without using explicitly using `set` or `add`. This way it is possible to update a relation using e.g. DOM interactions without making premature requests.\n\t * @returns Promise<void>\n\t */\n\tpublic async sync(): Promise<void> {\n\t\tif (this.instance === null) {\n\t\t\tawait this.remove();\n\t\t} else {\n\t\t\tawait this.set(this.instance);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the delete pipeline of your model for a related resource using the To-One request adapter and builder.\n\t * @param  TRelated targetInstance\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise\n\t */\n\tpublic async remove(options: HttpClientOptions = {}): Promise<void> {\n\t\tif (this.instance) {\n\t\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\t\t\tconst body = this._adapter.remove(this.instance, this._hostInstance);\n\t\t\tawait this._builder.remove(relatedName, hostName, body, this._hostInstance, options);\n\t\t\tthis.instance = null;\n\t\t}\n\t}\n\t/**\n\t * Runs the add pipeline of your model for a related resource using the To-One request adapter and builder.\n\t * @param  TRelated targetInstance\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise\n\t */\n\tpublic async set(targetInstance: TRelated, options: HttpClientOptions = {}): Promise<void> {\n\t\tconst hostName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.HostResource);\n\t\tconst relatedName = Reflect.getMetadata(METAKEYS.NAME, this._configuration.RelatedResource);\n\t\tconst body = this._adapter.add(targetInstance, this._hostInstance);\n\t\tawait this._builder.add(relatedName, hostName, body, this._hostInstance, options);\n\t\tthis.instance = targetInstance;\n\t}\n}\n","import { toPlural, ResourceModuleConfiguration, HttpClientOptions, HttpVerb } from '../utils';\nimport { HttpClient } from '@angular/common/http';\n\nexport namespace Abstract {\n\texport abstract class BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient) {}\n\n\t\tpublic request(method: HttpVerb, path: string, options: HttpClientOptions, body?: any): Promise<Object> {\n\t\t\tdelete options.url;\n\t\t\tif (body) {\n\t\t\t\toptions.body = body;\n\t\t\t}\n\t\t\treturn this._http.request(method, path, options).toPromise();\n\t\t}\n\t}\n\n\texport abstract class SimpleBuilder extends BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient, protected readonly config: ResourceModuleConfiguration) {\n\t\t\tsuper(_http);\n\t\t}\n\t\tprotected buildUrl(targetName: string, targetInstance?: any): string {\n\t\t\tlet path = (this.config.rootPath ? this.config.rootPath : '') + `/${toPlural(targetName)}/$targetId`;\n\t\t\tpath = path.replace('/$targetId', targetInstance ? `/${targetInstance.id}` : '');\n\t\t\treturn path;\n\t\t}\n\n\t\tpublic fetch(targetName: string, options: HttpClientOptions): Promise<Object> {\n\t\t\tconst path = options.url || this.buildUrl(targetName);\n\t\t\treturn <Promise<Object[]>>this.request(HttpVerb.GET, path, options);\n\t\t}\n\t\tpublic save(targetName: string, body: any, options: HttpClientOptions): Promise<Object> {\n\t\t\tconst path = options.url || this.buildUrl(targetName);\n\t\t\treturn this.request(HttpVerb.POST, path, options, body);\n\t\t}\n\t\tpublic update(targetName: string, body: any, options: HttpClientOptions): Promise<any> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, body);\n\t\t\treturn this.request(HttpVerb.PATCH, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t\tpublic delete(targetName: string, instance: any, options: HttpClientOptions): Promise<any> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, instance);\n\t\t\treturn this.request(HttpVerb.DELETE, path, options).then(() => Promise.resolve());\n\t\t}\n\t}\n\texport abstract class ToOneBuilder extends BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient, protected readonly config: ResourceModuleConfiguration) {\n\t\t\tsuper(_http);\n\t\t}\n\t\tprotected buildUrl(targetName: string, relatedName: string, relatedInstance: any): string {\n\t\t\tconst path = (this.config.rootPath ? this.config.rootPath : '') + `/${toPlural(relatedName)}/${relatedInstance.id}/${targetName}`;\n\t\t\treturn path;\n\t\t}\n\t\tpublic add(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.PATCH, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t\tpublic remove(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.DELETE, path, options).then(() => Promise.resolve());\n\t\t}\n\t}\n\texport abstract class ToManyBuilder extends BaseBuilder {\n\t\tconstructor(protected readonly _http: HttpClient, protected readonly config: ResourceModuleConfiguration) {\n\t\t\tsuper(_http);\n\t\t}\n\t\tprotected buildUrl(targetName: string, relatedName: string, relatedInstance: any): string {\n\t\t\tconst path =\n\t\t\t\t(this.config.rootPath ? this.config.rootPath : '') + `/${toPlural(relatedName)}/${relatedInstance.id}/${toPlural(targetName)}`;\n\t\t\treturn path;\n\t\t}\n\t\tpublic add(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.POST, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t\tpublic remove(targetName: string, relatedName: string, body: any, relatedInstance: any, options: HttpClientOptions): Promise<void> {\n\t\t\tconst path = options.url || this.buildUrl(targetName, relatedName, relatedInstance);\n\t\t\treturn this.request(HttpVerb.DELETE, path, options, body).then(() => Promise.resolve());\n\t\t}\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { ResourceModuleConfiguration } from '../utils';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Abstract } from './abstract-builders';\n\n/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class SimpleBuilder extends Abstract.SimpleBuilder {\n\tconstructor(_http: HttpClient, _config: ResourceModuleConfiguration) {\n\t\tsuper(_http, _config);\n\t}\n}\n/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToOneBuilder extends Abstract.ToOneBuilder {\n\tconstructor(_http: HttpClient, _config: ResourceModuleConfiguration) {\n\t\tsuper(_http, _config);\n\t}\n}\n/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToManyBuilder extends Abstract.ToManyBuilder {\n\tconstructor(_http: HttpClient, _config: ResourceModuleConfiguration) {\n\t\tsuper(_http, _config);\n\t}\n}\n\n","import { METAKEYS } from '../utils';\nimport { ToOneRelation } from '../relations/to-one';\nimport { ToManyRelation } from '../relations/to-many';\n\n/**\n * request adapters convert incoming bodies and outgoing bodies.\n * They do not touch options (headers and stuff).\n */\nexport namespace Abstract {\n\texport abstract class SimpleAdapter {\n\t\tpublic save(instance: any) {\n\t\t\treturn this.convertOutgoing(instance);\n\t\t}\n\t\tpublic update(instance: any, affectedFields: { [field: string]: string | undefined | null }) {\n\t\t\treturn this.convertOutgoing(instance);\n\t\t}\n\t\tpublic parseIncoming(rawInstances: Object): Object[] {\n\t\t\treturn <Object[]>rawInstances;\n\t\t}\n\t\tprotected convertOutgoing(instance: any): any {\n\t\t\tconst rv = {};\n\t\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, instance.constructor);\n\t\t\tfields.forEach((f: string) => {\n\t\t\t\tif (instance[f] instanceof ToOneRelation) {\n\t\t\t\t\trv[f] = instance[f].instance === null ? null : this.convertOutgoing(instance[f].instance);\n\t\t\t\t} else if (instance[f] instanceof Array) {\n\t\t\t\t\trv[f] = [];\n\t\t\t\t\tinstance[f].forEach( (i: any) => rv[f].push(this.convertOutgoing(i)));\n\t\t\t\t} else {\n\t\t\t\t\trv[f] = instance[f];\n\t\t\t\t}\n\t\t\t});\n\t\t\tReflect.ownKeys(instance).forEach(property => {\n\t\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, instance.constructor, <string>property);\n\t\t\t\tif (map) {\n\t\t\t\t\trv[map] = rv[property];\n\t\t\t\t\tdelete rv[property];\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn rv;\n\t\t}\n\t}\n\texport abstract class ToOneAdapter {\n\t\tpublic add(targetInstance: any, relatedInstance: any): any {\n\t\t\treturn { id: targetInstance.id };\n\t\t}\n\t\tpublic remove(targetInstance: any, relatedInstance: any): any {}\n\t}\n\texport abstract class ToManyAdapter {\n\t\tpublic add(targetInstance: any, relatedInstance: any): any {\n\t\t\treturn { id: targetInstance.id };\n\t\t}\n\t\tpublic remove(targetInstance: any, relatedInstance: any): any {}\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Abstract } from './abstract-adapters';\n\n\t/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class SimpleAdapter extends Abstract.SimpleAdapter {}\n\t/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToOneAdapter extends Abstract.ToOneAdapter {}\n\t/** @internal */\n@Injectable({ providedIn: 'root' })\nexport class ToManyAdapter extends Abstract.ToManyAdapter {}\n","/*tslint:disable:max-line-length*/\nimport { Optional } from '@angular/core';\nimport {\n\tgetDependencyInjectionEntries,\n\tMETAKEYS,\n\tupdateInterceptProxyFactory,\n\treadOnlyArrayProxyFactory,\n\tResourceType,\n\tHttpClientOptions,\n\tRequestHandlers,\n\tUnresolvedRequestHandlers,\n\tRawInstanceTemplate\n} from './utils';\nimport { ToManyRelation } from './relations/to-many';\nimport { RelationType } from './relations/relation-configuration';\nimport { ToOneRelation } from './relations/to-one';\nimport { ToManyBuilder, ToOneBuilder, SimpleBuilder } from './request-handlers/default-builders';\n\nimport { ToManyAdapter, ToOneAdapter, SimpleAdapter } from './request-handlers/default-adapters';\n\n/** A dummy class required to allow for an optional argument in the constructor of your model while keeping it compatible with Angular's dependency injection.\n *\n * There is no need to use this type anywhere explicitly.\n *\n * On the other hand, the type {@link RawInstanceTemplate<T>} might come in handy when instantiating instances of your model from plain objects, e.g. when using the [factory method]{@link Resource#factory}.\n *\n */\nexport class RawInstance {}\n\n// @dynamic\nexport class Resource {\n\tprivate _adapter: SimpleAdapter;\n\tprivate _builder: SimpleBuilder;\n\tprivate _toOneAdapter: ToOneAdapter;\n\tprivate _toOneBuilder: ToOneBuilder;\n\tprivate _toManyAdapter: ToManyAdapter;\n\tprivate _toManyBuilder: ToManyBuilder;\n\n\t/** Primary key for your model. */\n\tpublic id: string | number;\n\n\t/**\n\t * Used internally for {@link Resource#collection}. Don't use this one, use {@link Resource#collection} instead.\n\t * @returns T[]\n\t */\n\tpublic static get _instances() {\n\t\treturn readOnlyArrayProxyFactory(Reflect.getMetadata(METAKEYS.INSTANCES, this));\n\t}\n\n\t/**\n\t * Retrieve an immutable list of all of the instances of your model.\n\t * @returns T[]\n\t */\n\tpublic static collection<T extends Resource>(this: ResourceType<T>): T[] {\n\t\treturn this._instances;\n\t}\n\n\t/**\n\t * Instantiate multiple instances from a collection of templates.\n\t * @param  Array<{}> input\n\t * @returns Array<T> An array of instances of your model.\n\t */\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: Array<{}>): Array<T>;\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: {}): T;\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: {} | Array<{}>): T | Array<T> {\n\t\tif (input instanceof Array) {\n\t\t\treturn <T[]>input.map(ro => new this(ro));\n\t\t} else if (input instanceof Object) {\n\t\t\treturn <T>new this(input);\n\t\t} else {\n\t\t\tthrow new TypeError('Overload error');\n\t\t}\n\t}\n\t/**\n\t * Find a locally available instance of your model by id. Does not make any requests.\n\t * @param  number id\n\t * @returns T\n\t */\n\tpublic static find<T extends Resource>(this: ResourceType<T>, id: number): T | undefined {\n\t\treturn this.collection().find((i: any) => i.id === id);\n\t}\n\n\t/**\n\t * Runs the fetch pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<T>\n\t */\n\tpublic static async fetch<T extends Resource>(this: ResourceType<T>, options: HttpClientOptions = {}): Promise<T[]> {\n\t\tconst injections = getDependencyInjectionEntries(this);\n\t\tconst adapter = injections[0];\n\t\tconst builder = injections[1];\n\t\tconst resourceName = Reflect.getMetadata(METAKEYS.NAME, this);\n\n\t\tconst response = await builder.fetch(resourceName, options);\n\t\tconst rawInstances = adapter.parseIncoming(response);\n\t\treturn this.factory<T>(rawInstances);\n\t}\n\t/**\n\t * Call this method to get an empty template for your model. This can for example be useful to use as a model for forms.\n\t * @returns A raw instance template object.\n\t */\n\tpublic static template<T extends Resource>(this: ResourceType<T>): RawInstanceTemplate<T> {\n\t\tconst rawInstance = {};\n\t\tReflect.getMetadata(METAKEYS.FIELDS, this).forEach((field: string) => (rawInstance[field] = undefined));\n\t\treturn (rawInstance as any) as RawInstanceTemplate<T>;\n\t}\n\n\t/**\n\t * Do not override the constructor unless you're know what you're doing. If you think you need it, be sure the check out the source code to see make sure your implementation is not messing with anything internally.\n\t *\n\t * @param RawInstance rawInstance A template from which a new instance of your model will be instantiate. If this parameter is omitted, the model will create an instance from the models metadata. If the parameter is included, it **MUST** minimally include all the keys as decorated with {@link Field}, {@link ToOne}, {@link ToMany} in the model definition with. The type `RawInstance` is just a dummy type that is required to make it work with Angular's dependency injection.\n\t * @param SimpleAdapter simpleAdapter The request content adapter for Simple resource requests.\n\t * @param SimpleBuilder simpleBuilder The request builder for Simple resource requests.\n\t * @param ToOneAdapter toOneAdapter The request content adapter for ToOne relationship requests\n\t * @param ToOneBuilder toOneBuilder The request builder for  ToOne relationship requests\n\t * @param ToManyAdapter toManyAdapter The request content adapter for ToMany relationship requests\n\t * @param ToManyBuilder toManyBuilder The request builder for  ToMany relationship requests\n\t */\n\tconstructor(\n\t\t@Optional() rawInstance?: RawInstance /* need to figure out how to refer to inheriting type here */,\n\t\tsimpleAdapter?: SimpleAdapter,\n\t\tsimpleBuilder?: SimpleBuilder,\n\t\ttoOneAdapter?: ToOneAdapter,\n\t\ttoOneBuilder?: ToOneBuilder,\n\t\ttoManyAdapter?: ToManyAdapter,\n\t\ttoManyBuilder?: ToManyBuilder\n\t) {\n\t\tconst requestHandlers: UnresolvedRequestHandlers = [\n\t\t\tsimpleAdapter,\n\t\t\tsimpleBuilder,\n\t\t\ttoOneAdapter,\n\t\t\ttoOneBuilder,\n\t\t\ttoManyAdapter,\n\t\t\ttoManyBuilder\n\t\t];\n\n\t\t/**  The constructor can be called by the dependency injector or by the user. In the former case, assuming that the user did not manually inject the requestHandlers, only the first parameter will be falsy. In the latter case, only the first parameter will be truthy, in which case we will retrieve the injections by getDependencyInjectionEntries (see _handleInjections internal method). */\n\t\tconst instantationByAngularDI = this._handleInjections(requestHandlers);\n\t\tif (instantationByAngularDI && rawInstance === null) {\n\t\t\treturn this;\n\t\t}\n\t\tlet _rawInstance: any;\n\t\tif (!rawInstance) {\n\t\t\t_rawInstance = this.ctor.template();\n\t\t} else {\n\t\t\t_rawInstance = rawInstance;\n\t\t\t_rawInstance.id = _rawInstance.id || undefined;\n\t\t\tconst alreadyExisting = this.ctor.find(_rawInstance.id);\n\t\t\tif (alreadyExisting) {\n\t\t\t\treturn alreadyExisting;\n\t\t\t}\n\t\t}\n\n\t\tthis._populateFields(_rawInstance);\n\t\tthis._populateRelations();\n\t\tthis.onInit(_rawInstance);\n\t\tconst proxyInstance = updateInterceptProxyFactory(this);\n\t\tReflect.defineMetadata(METAKEYS.UPDATED, {}, proxyInstance);\n\t\tthis._metaAdd(proxyInstance);\n\t\treturn proxyInstance;\n\t}\n\n\t/**\n\t * Do some business logic upon initialization. This method is called by the constructor; do not override constructor unless you know what you're doing\n\t * @param rawInstance the raw instance template as consumed by the constructor\n\t * @returns void You cannot return anything from the onInit hook.\n\t */\n\tpublic onInit(rawInstance: any): void {}\n\n\t/**\n\t * Runs the save pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<T>\n\t */\n\tpublic async save(options: HttpClientOptions = {}): Promise<this> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tconst body = this._adapter.save(this);\n\t\tconst response = await this._builder.save(name, body, options);\n\t\tconst rawInstance = this._adapter.parseIncoming(response);\n\t\treturn this.ctor.factory(<Object>rawInstance);\n\t}\n\n\t/**\n\t * Runs the update pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<void>\n\t */\n\tpublic async update(options: HttpClientOptions = {}): Promise<void> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tconst affectedKeys = Reflect.getMetadata(METAKEYS.UPDATED, this);\n\t\tconst body = this._adapter.update(this, affectedKeys);\n\t\tawait this._builder.update(name, body, options);\n\t}\n\n\t/**\n\t * Runs the delete pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<void>\n\t */\n\tpublic async delete(options: HttpClientOptions = {}): Promise<void> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tawait this._builder.delete(name, this, options);\n\t\tthis._metaRemove();\n\t}\n\n\t/** @internal */\n\tprivate get ctor(): ResourceType<this> {\n\t\treturn <ResourceType<this>>this.constructor;\n\t}\n\t/** @internal */\n\tprivate _populateFields(rawInstance: any) {\n\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, this.constructor) as Array<string>;\n\t\tfields.forEach(field => {\n\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, this.constructor, field);\n\t\t\tif (map && rawInstance.hasOwnProperty(map)) {\n\t\t\t\tthis[field] = rawInstance[map];\n\t\t\t} else if (rawInstance.hasOwnProperty(field)) {\n\t\t\t\tthis[field] = rawInstance[field];\n\t\t\t} else if (!rawInstance.hasOwnProperty(field)) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Expected key ${field} for instance of class ${Reflect.getMetadata(METAKEYS.NAME, this.constructor)} but it wasn't included`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\t/** @internal */\n\tprivate _populateRelations() {\n\t\tconst relations = Reflect.getMetadata(METAKEYS.RELATIONS, this.constructor);\n\t\tReflect.ownKeys(relations).forEach(key => {\n\t\t\tconst config = relations[key];\n\t\t\tswitch (config.type) {\n\t\t\t\tcase RelationType.ToOne:\n\t\t\t\t\tthis[key] = new ToOneRelation(this, config, this._toOneAdapter, this._toOneBuilder);\n\t\t\t\t\tbreak;\n\t\t\t\tcase RelationType.ToMany:\n\t\t\t\t\tthis[key] = new ToManyRelation(this, config, this._toManyAdapter, this._toManyBuilder);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error('shouldnt come here');\n\t\t\t}\n\t\t});\n\t}\n\n\t/** @internal add instance to the metadata instance list*/\n\tprivate _metaAdd(instance: this) {\n\t\tif (this.id) {\n\t\t\tconst list = Reflect.getMetadata(METAKEYS.INSTANCES, this.constructor);\n\t\t\tlist.push(instance);\n\t\t}\n\t}\n\n\t/** @internal remove instance from the metadata instance list*/\n\tprivate _metaRemove() {\n\t\tconst list = Reflect.getMetadata(METAKEYS.INSTANCES, this.constructor);\n\t\tfor (let n = 0; n < list.length; n++) {\n\t\t\tif (list[n].id === this.id) {\n\t\t\t\tlist.splice(n, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate _handleInjections(dependencies: UnresolvedRequestHandlers) {\n\t\t// the assumption is that if (at least one) of the injections was undefined, the\n\t\t// instantiation was not done by Angulars dependency injection.\n\t\tconst instantationByAngularDI = !dependencies.includes(undefined);\n\t\tif (!instantationByAngularDI) {\n\t\t\tdependencies = getDependencyInjectionEntries(this.ctor) as RequestHandlers;\n\t\t}\n\t\tconst filledDependencies = dependencies as RequestHandlers;\n\t\tthis._adapter = filledDependencies[0];\n\t\tthis._builder = filledDependencies[1];\n\t\tthis._toOneAdapter = filledDependencies[2];\n\t\tthis._toOneBuilder = filledDependencies[3];\n\t\tthis._toManyAdapter = filledDependencies[4];\n\t\tthis._toManyBuilder = filledDependencies[5];\n\t\treturn instantationByAngularDI;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Resource } from './resource.core';\nimport { RelationType, RelationConfiguration } from './relations/relation-configuration';\nimport { toDash, initMetaData, METAKEYS } from './utils';\n\n/**\n * Options object that can be passed to the {@link Model} when decorating your model. Currently it is only possible to configure `name`, which is used in\n * generating the urls for requests.\n *\n * If you have a custom `uglify.config.js` file in which `mangle` is set to false, you do not need to use this.\n *\n * If you don't, then Angular's AOT will obfuscate `constructor.name`, and this library will not be able to construct URL according to the name of your model.\n * To prevent this from happening, you can pass `name` in the decorator options.\n *\n * Alternatively, you can use `name` to provide for a custom representation in the url.\n *\n * @example\n * // uglify.config.js with mangle = false\n * @Model() // will produce calls to .../my-dummy-models/...\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model() // will not work!\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model({name: 'MyDummyModel'}) // will produce calls to .../my-dummy-models/...\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model({name: 'MyAlternativeName'}) // will produce calls to .../my-alternative-name/...\n * class MyDummyModel extends Resource {}\n *\n * // without mangle = false\n * @Model({name: 'my-alternative-name'}) // will produce calls to .../my-alternative-name/...\n * class MyDummyModel extends Resource {}\n */\nexport interface ModelOptions {\n\tname?: string;\n}\n/**\n * Add this class decorator to your model to turn it into a `Resource` model, which means that it is considered as an endpoint on your API.\n *\n * See {@link ModelOptions} on how to configure the name used in URLs.\n *\n * This decorator is responsible for setting metadata, which is used internally, on the constructor of your class.\n *\n * @param  ModelOptions={} options\n */\nexport function Model(options?: ModelOptions) {\n\treturn <T extends Resource>(ctor: any) => {\n\t\tctor = Injectable({ providedIn: 'root' })(ctor);\n\t\tinitMetaData(ctor);\n\t\tconst resourceName = options && options.name ? (options.name.includes('-') ? options.name : toDash(options.name)) : toDash(ctor.name);\n\t\tReflect.defineMetadata(METAKEYS.NAME, resourceName, ctor);\n\n\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, ctor);\n\t\tconst attributes = Reflect.getMetadata(METAKEYS.ATTRIBUTES, ctor);\n\t\tReflect.defineMetadata(METAKEYS.FIELDS, fields.concat(attributes), ctor);\n\n\t\treturn ctor;\n\t};\n}\n\n/**\n * Use this field decorator to parse the corresponding field from a json response by your API.\n * @param string mapFrom? An identifier to map keys coming from an incoming json response to keys in your model.\n *  For example: the api response has a key `commentText: 'nice article!` but the key in the model is `commentContent`.\n * Then the decorator should be used as `Field('commentText').\n */\nexport function Field(mapFrom?: string) {\n\treturn <T extends Resource>(target: any, key: string) => {\n\t\tconst ctor = target.constructor;\n\t\tinitMetaData(ctor);\n\t\tReflect.defineMetadata(METAKEYS.MAP, mapFrom, ctor, key);\n\t\tReflect.getMetadata(METAKEYS.ATTRIBUTES, ctor).push(key);\n\t};\n}\n\n/**\n * Use this field decorator to parse the corresponding field from a json response by your API and to identify the key as a To-One relationship.\n * @param Function RelatedResource The constructor function of the model that is targeted for the To-Many relation.\n * @param string mapFrom? An identifier to map keys coming from an incoming json response to keys in your model.\n *  For example: the api response has a key `commentText: 'nice article!` but the key in the model is `commentContent`.\n * Then the decorator should be used as `Field('commentText').\n */\nexport const ToOne = function<TRelated extends Resource>(RelatedResource: any, mapFrom?: string) {\n\treturn (target: any, key: string) => {\n\t\tconst ctor = target.constructor;\n\t\tinitMetaData(ctor);\n\t\tReflect.defineMetadata(METAKEYS.MAP, mapFrom, ctor, key);\n\t\tReflect.getMetadata(METAKEYS.FIELDS, ctor).push(key);\n\t\tReflect.getMetadata(METAKEYS.RELATIONS, ctor)[key] = new RelationConfiguration(ctor, RelatedResource, key, RelationType.ToOne);\n\t};\n};\n\n/**\n * Use this field decorator to parse the corresponding field from a json response by your API and to identify the key as a To-Many relationship.\n * @param Function RelatedResource The constructor function of the model that is targeted for the To-Many relation.\n * @param string mapFrom? An identifier to map keys coming from an incoming json response to keys in your model.\n *  For example: the api response has a key `commentText: 'nice article!` but the key in the model is `commentContent`.\n * Then the decorator should be used as `Field('commentText').\n */\nexport const ToMany = function <TRelated extends Resource>(RelatedResource: any, mapFrom?: string) {\n\treturn (target: any, key: string) => {\n\t\tconst ctor = target.constructor;\n\t\tinitMetaData(ctor);\n\t\tReflect.defineMetadata(METAKEYS.MAP, mapFrom, ctor, key);\n\t\tReflect.getMetadata(METAKEYS.FIELDS, ctor).push(key);\n\t\tReflect.getMetadata(METAKEYS.RELATIONS, ctor)[key] = new RelationConfiguration(ctor, RelatedResource, key, RelationType.ToMany);\n\t};\n};\n","import 'reflect-metadata';\nimport { NgModule, ModuleWithProviders, Injector, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Resource } from './resource.core';\nimport { Field, ToMany, ToOne, Model } from './resource.decorators';\nimport { ToManyRelation } from './relations/to-many';\nimport { ToOneRelation } from './relations/to-one';\nimport { InjectorContainer, ResourceModuleConfiguration, ResourceModuleConfigurationWithProviders,\n\tHttpClientOptions, toPlural, toDash, toPluralDash, HttpVerb, METAKEYS } from './utils';\nimport { Abstract as AbstractAdapters } from './request-handlers/abstract-adapters';\nimport { Abstract as AbstractBuilders } from './request-handlers/abstract-builders';\nimport { ToManyAdapter, ToOneAdapter, SimpleAdapter } from './request-handlers/default-adapters';\nimport { ToManyBuilder, ToOneBuilder, SimpleBuilder } from './request-handlers/default-builders';\n\n\n/** @internal */\n@NgModule({ imports: [HttpClientModule] })\nexport class ResourceRootModule {\n\tconstructor(injector: Injector) {\n\t\tInjectorContainer.instance = injector;\n\t}\n}\n\n@NgModule({ imports: [HttpClientModule] })\nclass ResourceModule {\n\tstatic forRoot(options: ResourceModuleConfigurationWithProviders = {}): ModuleWithProviders {\n\t\tconst config: Provider[] = [{ provide: ResourceModuleConfiguration, useValue: { rootPath: options.rootPath } }];\n\t\treturn {\n\t\t\tngModule: ResourceRootModule,\n\t\t\tproviders: config.concat(options.requestHandler || [])\n\t\t};\n\t}\n}\n\nexport {\n\tResourceModule,\n\tResource,\n\tField,\n\tToOne,\n\tToMany,\n\tModel,\n\tToManyRelation,\n\tToOneRelation,\n\tAbstractAdapters,\n\tAbstractBuilders,\n\tResourceModuleConfigurationWithProviders,\n\tToManyAdapter,\n\tToOneAdapter,\n\tSimpleAdapter,\n\tToManyBuilder,\n\tToOneBuilder,\n\tSimpleBuilder,\n\tResourceModuleConfiguration,\n\tHttpClientOptions,\n\ttoPlural,\n\ttoDash,\n\ttoPluralDash,\n\tHttpVerb,\n\tMETAKEYS\n};\n"],"names":["map","tslib_1.__extends","of","concatMap","filter","Injectable","InjectionToken","Observable","tslib_1.__param","Inject","DOCUMENT","parseCookieValue","PLATFORM_ID","Injector","NgModule","Reflect","Abstract","Optional","SimpleAdapter","SimpleBuilder","ToOneAdapter","ToOneBuilder","ToManyAdapter","ToManyBuilder"],"mappings":"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"}