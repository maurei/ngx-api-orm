{"version":3,"file":"resource.core.js","sourceRoot":"","sources":["../package/src/resource.core.ts"],"names":[],"mappings":"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","sourcesContent":["/*tslint:disable:max-line-length*/\nimport { Optional } from '@angular/core';\nimport {\n\tgetDependencyInjectionEntries,\n\tMETAKEYS,\n\tupdateInterceptProxyFactory,\n\treadOnlyArrayProxyFactory,\n\tResourceType,\n\tHttpClientOptions,\n\tRequestHandlers,\n\tUnresolvedRequestHandlers,\n\tRawInstanceTemplate\n} from './utils';\nimport { ToManyRelation } from './relations/to-many';\nimport { RelationType } from './relations/relation-configuration';\nimport { ToOneRelation } from './relations/to-one';\nimport { ToManyBuilder, ToOneBuilder, SimpleBuilder } from './request-handlers/default-builders';\n\nimport { ToManyAdapter, ToOneAdapter, SimpleAdapter } from './request-handlers/default-adapters';\n\n/** A dummy class required to allow for an optional argument in the constructor of your model while keeping it compatible with Angular's dependency injection.\n *\n * There is no need to use this type anywhere explicitly.\n *\n * On the other hand, the type {@link RawInstanceTemplate<T>} might come in handy when instantiating instances of your model from plain objects, e.g. when using the [factory method]{@link Resource#factory}.\n *\n */\nexport class RawInstance {}\n\n// @dynamic\nexport class Resource {\n\tprivate _adapter: SimpleAdapter;\n\tprivate _builder: SimpleBuilder;\n\tprivate _toOneAdapter: ToOneAdapter;\n\tprivate _toOneBuilder: ToOneBuilder;\n\tprivate _toManyAdapter: ToManyAdapter;\n\tprivate _toManyBuilder: ToManyBuilder;\n\n\t/** Primary key for your model. */\n\tpublic id: string | number;\n\n\t/**\n\t * Used internally for {@link Resource#collection}. Don't use this one, use {@link Resource#collection} instead.\n\t * @returns T[]\n\t */\n\tpublic static get _instances() {\n\t\treturn readOnlyArrayProxyFactory(Reflect.getMetadata(METAKEYS.INSTANCES, this));\n\t}\n\n\t/**\n\t * Retrieve an immutable list of all of the instances of your model.\n\t * @returns T[]\n\t */\n\tpublic static collection<T extends Resource>(this: ResourceType<T>): T[] {\n\t\treturn this._instances;\n\t}\n\n\t/**\n\t * Instantiate multiple instances from a collection of templates.\n\t * @param  Array<{}> input\n\t * @returns Array<T> An array of instances of your model.\n\t */\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: Array<{}>): Array<T>;\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: {}): T;\n\tpublic static factory<T extends Resource>(this: ResourceType<T>, input: {} | Array<{}>): T | Array<T> {\n\t\tif (input instanceof Array) {\n\t\t\treturn <T[]>input.map(ro => new this(ro));\n\t\t} else if (input instanceof Object) {\n\t\t\treturn <T>new this(input);\n\t\t} else {\n\t\t\tthrow new TypeError('Overload error');\n\t\t}\n\t}\n\t/**\n\t * Find a locally available instance of your model by id. Does not make any requests.\n\t * @param  number id\n\t * @returns T\n\t */\n\tpublic static find<T extends Resource>(this: ResourceType<T>, id: number): T | undefined {\n\t\treturn this.collection().find((i: any) => i.id === id);\n\t}\n\n\t/**\n\t * Runs the fetch pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<T>\n\t */\n\tpublic static async fetch<T extends Resource>(this: ResourceType<T>, options: HttpClientOptions = {}): Promise<T[]> {\n\t\tconst injections = getDependencyInjectionEntries(this);\n\t\tconst adapter = injections[0];\n\t\tconst builder = injections[1];\n\t\tconst resourceName = Reflect.getMetadata(METAKEYS.NAME, this);\n\n\t\tconst response = await builder.fetch(resourceName, options);\n\t\tconst rawInstances = adapter.parseIncoming(response);\n\t\treturn this.factory<T>(rawInstances);\n\t}\n\t/**\n\t * Call this method to get an empty template for your model. This can for example be useful to use as a model for forms.\n\t * @returns A raw instance template object.\n\t */\n\tpublic static template<T extends Resource>(this: ResourceType<T>): RawInstanceTemplate<T> {\n\t\tconst rawInstance = {};\n\t\tReflect.getMetadata(METAKEYS.FIELDS, this).forEach((field: string) => (rawInstance[field] = undefined));\n\t\treturn (rawInstance as any) as RawInstanceTemplate<T>;\n\t}\n\n\t/**\n\t * Do not override the constructor unless you're know what you're doing. If you think you need it, be sure the check out the source code to see make sure your implementation is not messing with anything internally.\n\t *\n\t * @param RawInstance rawInstance A template from which a new instance of your model will be instantiate. If this parameter is omitted, the model will create an instance from the models metadata. If the parameter is included, it **MUST** minimally include all the keys as decorated with {@link Field}, {@link ToOne}, {@link ToMany} in the model definition with. The type `RawInstance` is just a dummy type that is required to make it work with Angular's dependency injection.\n\t * @param SimpleAdapter simpleAdapter The request content adapter for Simple resource requests.\n\t * @param SimpleBuilder simpleBuilder The request builder for Simple resource requests.\n\t * @param ToOneAdapter toOneAdapter The request content adapter for ToOne relationship requests\n\t * @param ToOneBuilder toOneBuilder The request builder for  ToOne relationship requests\n\t * @param ToManyAdapter toManyAdapter The request content adapter for ToMany relationship requests\n\t * @param ToManyBuilder toManyBuilder The request builder for  ToMany relationship requests\n\t */\n\tconstructor(\n\t\t@Optional() rawInstance?: RawInstance /* need to figure out how to refer to inheriting type here */,\n\t\tsimpleAdapter?: SimpleAdapter,\n\t\tsimpleBuilder?: SimpleBuilder,\n\t\ttoOneAdapter?: ToOneAdapter,\n\t\ttoOneBuilder?: ToOneBuilder,\n\t\ttoManyAdapter?: ToManyAdapter,\n\t\ttoManyBuilder?: ToManyBuilder\n\t) {\n\t\tconst requestHandlers: UnresolvedRequestHandlers = [\n\t\t\tsimpleAdapter,\n\t\t\tsimpleBuilder,\n\t\t\ttoOneAdapter,\n\t\t\ttoOneBuilder,\n\t\t\ttoManyAdapter,\n\t\t\ttoManyBuilder\n\t\t];\n\n\t\t/**  The constructor can be called by the dependency injector or by the user. In the former case, assuming that the user did not manually inject the requestHandlers, only the first parameter will be falsy. In the latter case, only the first parameter will be truthy, in which case we will retrieve the injections by getDependencyInjectionEntries (see _handleInjections internal method). */\n\t\tconst instantationByAngularDI = this._handleInjections(requestHandlers);\n\t\tif (instantationByAngularDI && rawInstance === null) {\n\t\t\treturn this;\n\t\t}\n\t\tlet _rawInstance: any;\n\t\tif (!rawInstance) {\n\t\t\t_rawInstance = this.ctor.template();\n\t\t} else {\n\t\t\t_rawInstance = rawInstance;\n\t\t\t_rawInstance.id = _rawInstance.id || undefined;\n\t\t\tconst alreadyExisting = this.ctor.find(_rawInstance.id);\n\t\t\tif (alreadyExisting) {\n\t\t\t\treturn alreadyExisting;\n\t\t\t}\n\t\t}\n\n\t\tthis._populateFields(_rawInstance);\n\t\tthis._populateRelations();\n\t\tthis.onInit(_rawInstance);\n\t\tconst proxyInstance = updateInterceptProxyFactory(this);\n\t\tReflect.defineMetadata(METAKEYS.UPDATED, {}, proxyInstance);\n\t\tthis._metaAdd(proxyInstance);\n\t\treturn proxyInstance;\n\t}\n\n\t/**\n\t * Do some business logic upon initialization. This method is called by the constructor; do not override constructor unless you know what you're doing\n\t * @param rawInstance the raw instance template as consumed by the constructor\n\t * @returns void You cannot return anything from the onInit hook.\n\t */\n\tpublic onInit(rawInstance: any): void {}\n\n\t/**\n\t * Runs the save pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<T>\n\t */\n\tpublic async save(options: HttpClientOptions = {}): Promise<this> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tconst body = this._adapter.save(this);\n\t\tconst response = await this._builder.save(name, body, options);\n\t\tconst rawInstance = this._adapter.parseIncoming(response);\n\t\treturn this.ctor.factory(<Object>rawInstance);\n\t}\n\n\t/**\n\t * Runs the update pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<void>\n\t */\n\tpublic async update(options: HttpClientOptions = {}): Promise<void> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tconst affectedKeys = Reflect.getMetadata(METAKEYS.UPDATED, this);\n\t\tconst body = this._adapter.update(this, affectedKeys);\n\t\tawait this._builder.update(name, body, options);\n\t}\n\n\t/**\n\t * Runs the delete pipeline of your model for a single resource using the simple request adapter and builder.\n\t * @param  HttpClientOptions={} options\n\t * @returns Promise<void>\n\t */\n\tpublic async delete(options: HttpClientOptions = {}): Promise<void> {\n\t\tconst name = Reflect.getMetadata(METAKEYS.NAME, this.constructor);\n\t\tawait this._builder.delete(name, this, options);\n\t\tthis._metaRemove();\n\t}\n\n\t/** @internal */\n\tprivate get ctor(): ResourceType<this> {\n\t\treturn <ResourceType<this>>this.constructor;\n\t}\n\t/** @internal */\n\tprivate _populateFields(rawInstance: any) {\n\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, this.constructor) as Array<string>;\n\t\tfields.forEach(field => {\n\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, this.constructor, field);\n\t\t\tif (map && rawInstance.hasOwnProperty(map)) {\n\t\t\t\tthis[field] = rawInstance[map];\n\t\t\t} else if (rawInstance.hasOwnProperty(field)) {\n\t\t\t\tthis[field] = rawInstance[field];\n\t\t\t} else if (!rawInstance.hasOwnProperty(field)) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Expected key ${field} for instance of class ${Reflect.getMetadata(METAKEYS.NAME, this.constructor)} but it wasn't included`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\t/** @internal */\n\tprivate _populateRelations() {\n\t\tconst relations = Reflect.getMetadata(METAKEYS.RELATIONS, this.constructor);\n\t\tReflect.ownKeys(relations).forEach(key => {\n\t\t\tconst config = relations[key];\n\t\t\tswitch (config.type) {\n\t\t\t\tcase RelationType.ToOne:\n\t\t\t\t\tthis[key] = new ToOneRelation(this, config, this._toOneAdapter, this._toOneBuilder);\n\t\t\t\t\tbreak;\n\t\t\t\tcase RelationType.ToMany:\n\t\t\t\t\tthis[key] = new ToManyRelation(this, config, this._toManyAdapter, this._toManyBuilder);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error('shouldnt come here');\n\t\t\t}\n\t\t});\n\t}\n\n\t/** @internal add instance to the metadata instance list*/\n\tprivate _metaAdd(instance: this) {\n\t\tif (this.id) {\n\t\t\tconst list = Reflect.getMetadata(METAKEYS.INSTANCES, this.constructor);\n\t\t\tlist.push(instance);\n\t\t}\n\t}\n\n\t/** @internal remove instance from the metadata instance list*/\n\tprivate _metaRemove() {\n\t\tconst list = Reflect.getMetadata(METAKEYS.INSTANCES, this.constructor);\n\t\tfor (let n = 0; n < list.length; n++) {\n\t\t\tif (list[n].id === this.id) {\n\t\t\t\tlist.splice(n, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate _handleInjections(dependencies: UnresolvedRequestHandlers) {\n\t\t// the assumption is that if (at least one) of the injections was undefined, the\n\t\t// instantiation was not done by Angulars dependency injection.\n\t\tconst instantationByAngularDI = !dependencies.includes(undefined);\n\t\tif (!instantationByAngularDI) {\n\t\t\tdependencies = getDependencyInjectionEntries(this.ctor) as RequestHandlers;\n\t\t}\n\t\tconst filledDependencies = dependencies as RequestHandlers;\n\t\tthis._adapter = filledDependencies[0];\n\t\tthis._builder = filledDependencies[1];\n\t\tthis._toOneAdapter = filledDependencies[2];\n\t\tthis._toOneBuilder = filledDependencies[3];\n\t\tthis._toManyAdapter = filledDependencies[4];\n\t\tthis._toManyBuilder = filledDependencies[5];\n\t\treturn instantationByAngularDI;\n\t}\n}\n"]}