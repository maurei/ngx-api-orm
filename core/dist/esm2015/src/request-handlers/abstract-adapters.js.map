{"version":3,"file":"abstract-adapters.js","sourceRoot":"","sources":["../../package/src/request-handlers/abstract-adapters.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;;;;;AAOpD,MAAM,KAAW,QAAQ;;;;;AAAzB,WAAiB,QAAQ;;;;IACxB;;;;;QACQ,IAAI,CAAC,QAAa;YACxB,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;;;;;;;QAEhC,MAAM,CAAC,QAAa,EAAE,cAA8D;YAC1F,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;;;;;;QAEhC,aAAa,CAAC,YAAoB;YACxC,yBAAiB,YAAY,EAAC;;;;;;QAErB,eAAe,CAAC,QAAa;;YACtC,MAAM,EAAE,GAAG,EAAE,CAAC;;YACd,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC1E,MAAM,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,EAAE;gBAC5B,IAAI,QAAQ,CAAC,CAAC,CAAC,YAAY,aAAa,EAAE;oBACzC,EAAE,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;iBAC1F;qBAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,YAAY,KAAK,EAAE;oBACxC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;oBACX,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAE,CAAC,CAAM,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtE;qBAAM;oBACN,EAAE,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACpB;aACD,CAAC,CAAC;YACH,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;;gBAC5C,MAAM,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,WAAW,oBAAU,QAAQ,EAAC,CAAC;gBACtF,IAAI,GAAG,EAAE;oBACR,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC;oBACvB,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;iBACpB;aACD,CAAC,CAAC;YACH,OAAO,EAAE,CAAC;SACV;KACD;IAhCqB,sBAAa;;;;IAiCnC;;;;;;QACQ,GAAG,CAAC,cAAmB,EAAE,eAAoB;YACnD,OAAO,EAAE,EAAE,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC;;;;;;;QAE3B,MAAM,CAAC,cAAmB,EAAE,eAAoB;KACvD;IALqB,qBAAY;;;;IAMlC;;;;;;QACQ,GAAG,CAAC,cAAmB,EAAE,eAAoB;YACnD,OAAO,EAAE,EAAE,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC;;;;;;;QAE3B,MAAM,CAAC,cAAmB,EAAE,eAAoB;KACvD;IALqB,sBAAa;GAxCnB,QAAQ,KAAR,QAAQ,QA8CxB","sourcesContent":["import { METAKEYS } from '../utils';\nimport { ToOneRelation } from '../relations/to-one';\nimport { ToManyRelation } from '../relations/to-many';\n\n/**\n * request adapters convert incoming bodies and outgoing bodies.\n * They do not touch options (headers and stuff).\n */\nexport namespace Abstract {\n\texport abstract class SimpleAdapter {\n\t\tpublic save(instance: any) {\n\t\t\treturn this.convertOutgoing(instance);\n\t\t}\n\t\tpublic update(instance: any, affectedFields: { [field: string]: string | undefined | null }) {\n\t\t\treturn this.convertOutgoing(instance);\n\t\t}\n\t\tpublic parseIncoming(rawInstances: Object): Object[] {\n\t\t\treturn <Object[]>rawInstances;\n\t\t}\n\t\tprotected convertOutgoing(instance: any): any {\n\t\t\tconst rv = {};\n\t\t\tconst fields = Reflect.getMetadata(METAKEYS.FIELDS, instance.constructor);\n\t\t\tfields.forEach((f: string) => {\n\t\t\t\tif (instance[f] instanceof ToOneRelation) {\n\t\t\t\t\trv[f] = instance[f].instance === null ? null : this.convertOutgoing(instance[f].instance);\n\t\t\t\t} else if (instance[f] instanceof Array) {\n\t\t\t\t\trv[f] = [];\n\t\t\t\t\tinstance[f].forEach( (i: any) => rv[f].push(this.convertOutgoing(i)));\n\t\t\t\t} else {\n\t\t\t\t\trv[f] = instance[f];\n\t\t\t\t}\n\t\t\t});\n\t\t\tReflect.ownKeys(instance).forEach(property => {\n\t\t\t\tconst map = Reflect.getMetadata(METAKEYS.MAP, instance.constructor, <string>property);\n\t\t\t\tif (map) {\n\t\t\t\t\trv[map] = rv[property];\n\t\t\t\t\tdelete rv[property];\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn rv;\n\t\t}\n\t}\n\texport abstract class ToOneAdapter {\n\t\tpublic add(targetInstance: any, relatedInstance: any): any {\n\t\t\treturn { id: targetInstance.id };\n\t\t}\n\t\tpublic remove(targetInstance: any, relatedInstance: any): any {}\n\t}\n\texport abstract class ToManyAdapter {\n\t\tpublic add(targetInstance: any, relatedInstance: any): any {\n\t\t\treturn { id: targetInstance.id };\n\t\t}\n\t\tpublic remove(targetInstance: any, relatedInstance: any): any {}\n\t}\n}\n"]}